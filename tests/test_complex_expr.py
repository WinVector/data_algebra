import data_algebra
import data_algebra.test_util
from data_algebra.data_ops import *  # https://github.com/WinVector/data_algebra
import data_algebra.util


def test_complex_expr_arith():
    d = data_algebra.data_model.default_data_model().pd.DataFrame(
        {
            "a": [
                0.3822317761382147,
                0.5930105134892851,
                0.4297947617248502,
                0.946747104460353,
                0.8959285432313322,
                0.33471632492883274,
                0.8128837725833241,
                0.2551974022034873,
                0.505639776121943,
                0.883405321733318,
            ],
            "b": [
                0.20246429400402566,
                0.05138878151782578,
                0.0593681910553181,
                0.26941284485968675,
                0.4677039734832157,
                0.29137828452786607,
                0.2281840133271441,
                0.592711473838597,
                0.027933121221367818,
                0.7400345627414209,
            ],
            "c": [
                0.45100960654660127,
                0.1877629941529937,
                0.9395905426649875,
                0.014913878716159346,
                0.40259003555655115,
                0.557195192773853,
                0.01632811566056369,
                0.3466771445260475,
                0.19893756939247542,
                0.6950080973705011,
            ],
            "u": [
                0.1547015967490316,
                0.31132438133053797,
                0.7001013743133476,
                0.09104466592198956,
                0.68569162176846,
                0.23614155470907383,
                0.4293088456687334,
                0.28429662111659026,
                0.6448480462046265,
                0.5829896099870311,
            ],
            "v": [
                0.09328765795999827,
                0.3135698953261469,
                0.31990923868826426,
                0.2817208245920172,
                0.8522805886837542,
                0.8990621964534211,
                0.29555733159209463,
                0.2619397560793828,
                0.7919292653716687,
                0.7425601201227615,
            ],
            "w": [
                0.260863920457835,
                0.5445508596922134,
                0.9177118041238277,
                0.1385195119687861,
                0.0961755188607063,
                0.8491267400201873,
                0.3833694102620684,
                0.010677753779608556,
                0.7639678832689107,
                0.20630883521052057,
            ],
            "x": [
                0.447571379157812,
                0.5547671899844803,
                0.6585082780144224,
                0.4145857512624137,
                0.4401316766572063,
                0.03816287322622691,
                0.6372732647561277,
                0.8955315796456044,
                0.05080566650343643,
                0.6182869125139312,
            ],
            "y": [
                0.13045314244171458,
                0.09482811449496453,
                0.9888833619084938,
                0.759210939970586,
                0.1769414085504295,
                0.1958748592254429,
                0.2642419127003942,
                0.470687669463138,
                0.006191017968947499,
                0.2553504174854866,
            ],
            "z": [
                0.05987193329620677,
                0.3119824897220278,
                0.13419872035895242,
                0.3997929254503736,
                0.872758510903406,
                0.575887174307153,
                0.12390292714154472,
                0.10494958030386736,
                0.24386264974291427,
                0.8196238360204454,
            ],
        }
    )
    ops = describe_table(d, table_name="d").extend({"res": "a*b*c + u*v*w + x*y*z"})
    expect = data_algebra.data_model.default_data_model().pd.DataFrame(
        {
            "a": [
                0.3822317761382147,
                0.5930105134892851,
                0.4297947617248502,
                0.946747104460353,
                0.8959285432313322,
                0.33471632492883274,
                0.8128837725833241,
                0.2551974022034873,
                0.505639776121943,
                0.883405321733318,
            ],
            "b": [
                0.20246429400402566,
                0.05138878151782578,
                0.0593681910553181,
                0.26941284485968675,
                0.4677039734832157,
                0.29137828452786607,
                0.2281840133271441,
                0.592711473838597,
                0.027933121221367818,
                0.7400345627414209,
            ],
            "c": [
                0.45100960654660127,
                0.1877629941529937,
                0.9395905426649875,
                0.014913878716159346,
                0.40259003555655115,
                0.557195192773853,
                0.01632811566056369,
                0.3466771445260475,
                0.19893756939247542,
                0.6950080973705011,
            ],
            "u": [
                0.1547015967490316,
                0.31132438133053797,
                0.7001013743133476,
                0.09104466592198956,
                0.68569162176846,
                0.23614155470907383,
                0.4293088456687334,
                0.28429662111659026,
                0.6448480462046265,
                0.5829896099870311,
            ],
            "v": [
                0.09328765795999827,
                0.3135698953261469,
                0.31990923868826426,
                0.2817208245920172,
                0.8522805886837542,
                0.8990621964534211,
                0.29555733159209463,
                0.2619397560793828,
                0.7919292653716687,
                0.7425601201227615,
            ],
            "w": [
                0.260863920457835,
                0.5445508596922134,
                0.9177118041238277,
                0.1385195119687861,
                0.0961755188607063,
                0.8491267400201873,
                0.3833694102620684,
                0.010677753779608556,
                0.7639678832689107,
                0.20630883521052057,
            ],
            "x": [
                0.447571379157812,
                0.5547671899844803,
                0.6585082780144224,
                0.4145857512624137,
                0.4401316766572063,
                0.03816287322622691,
                0.6372732647561277,
                0.8955315796456044,
                0.05080566650343643,
                0.6182869125139312,
            ],
            "y": [
                0.13045314244171458,
                0.09482811449496453,
                0.9888833619084938,
                0.759210939970586,
                0.1769414085504295,
                0.1958748592254429,
                0.2642419127003942,
                0.470687669463138,
                0.006191017968947499,
                0.2553504174854866,
            ],
            "z": [
                0.05987193329620677,
                0.3119824897220278,
                0.13419872035895242,
                0.3997929254503736,
                0.872758510903406,
                0.575887174307153,
                0.12390292714154472,
                0.10494958030386736,
                0.24386264974291427,
                0.8196238360204454,
            ],
            "res": [
                0.04216333165786014,
                0.07529465187722623,
                0.3169022028309628,
                0.13319496932020164,
                0.292870436876371,
                0.23892222452169173,
                0.07253717409346556,
                0.09747089016287408,
                0.39302508282552556,
                0.6730760279405322,
            ],
        }
    )
    data_algebra.test_util.check_transform(ops=ops, data=d, expect=expect,
    )


def test_complex_expr_logic():
    d = data_algebra.data_model.default_data_model().pd.DataFrame(
        {
            "a": [True, True, False, True, False, False, True, False, False, True],
            "b": [True, True, True, False, False, True, True, True, False, True],
            "c": [True, False, True, False, False, True, False, True, True, False],
            "u": [True, False, True, False, False, True, False, False, False, False],
            "v": [False, True, True, True, True, False, False, False, False, False],
            "w": [True, True, True, True, True, False, True, False, True, False],
            "x": [True, True, False, False, True, False, False, False, True, False],
            "y": [False, True, True, False, True, False, False, False, False, False],
            "z": [True, False, False, True, True, False, False, True, False, False],
        }
    )
    ops = describe_table(d, table_name="d").extend({"res": "a and b and c or u and v and w or x and y and z"})
    expect = data_algebra.data_model.default_data_model().pd.DataFrame(
        {
            "a": [True, True, False, True, False, False, True, False, False, True],
            "b": [True, True, True, False, False, True, True, True, False, True],
            "c": [True, False, True, False, False, True, False, True, True, False],
            "u": [True, False, True, False, False, True, False, False, False, False],
            "v": [False, True, True, True, True, False, False, False, False, False],
            "w": [True, True, True, True, True, False, True, False, True, False],
            "x": [True, True, False, False, True, False, False, False, True, False],
            "y": [False, True, True, False, True, False, False, False, False, False],
            "z": [True, False, False, True, True, False, False, True, False, False],
            "res": [True, False, True, False, True, False, False, False, False, False],
        }
    )
    data_algebra.test_util.check_transform(ops=ops, data=d, expect=expect,
    )


def test_complex_expr_arith_minus():
    d = data_algebra.data_model.default_data_model().pd.DataFrame(
        {
            "a": [
                0.3822317761382147,
                0.5930105134892851,
                0.4297947617248502,
                0.946747104460353,
                0.8959285432313322,
                0.33471632492883274,
                0.8128837725833241,
                0.2551974022034873,
                0.505639776121943,
                0.883405321733318,
            ],
            "b": [
                0.20246429400402566,
                0.05138878151782578,
                0.0593681910553181,
                0.26941284485968675,
                0.4677039734832157,
                0.29137828452786607,
                0.2281840133271441,
                0.592711473838597,
                0.027933121221367818,
                0.7400345627414209,
            ],
            "c": [
                0.45100960654660127,
                0.1877629941529937,
                0.9395905426649875,
                0.014913878716159346,
                0.40259003555655115,
                0.557195192773853,
                0.01632811566056369,
                0.3466771445260475,
                0.19893756939247542,
                0.6950080973705011,
            ],
            "d": [
                0.1547015967490316,
                0.31132438133053797,
                0.7001013743133476,
                0.09104466592198956,
                0.68569162176846,
                0.23614155470907383,
                0.4293088456687334,
                0.28429662111659026,
                0.6448480462046265,
                0.5829896099870311,
            ],
        }
    )
    ops = describe_table(d, table_name="d").extend({"res": "a*-1 + 1*-b + c*-d"})
    expect = d.copy()
    expect["res"] = -d["c"] * d["d"] - d["a"] - d["b"]

    res_pandas = ops.transform(d)
    assert data_algebra.test_util.equivalent_frames(expect, res_pandas)

    data_algebra.test_util.check_transform(ops=ops, data=d, expect=expect,
    )


def test_complex_expr_arith_minus_2():
    d = data_algebra.data_model.default_data_model().pd.DataFrame(
        {
            "a": [
                0.3822317761382147,
                0.5930105134892851,
                0.4297947617248502,
                0.946747104460353,
                0.8959285432313322,
                0.33471632492883274,
                0.8128837725833241,
                0.2551974022034873,
                0.505639776121943,
                0.883405321733318,
            ],
            "b": [
                0.20246429400402566,
                0.05138878151782578,
                0.0593681910553181,
                0.26941284485968675,
                0.4677039734832157,
                0.29137828452786607,
                0.2281840133271441,
                0.592711473838597,
                0.027933121221367818,
                0.7400345627414209,
            ],
            "c": [
                0.45100960654660127,
                0.1877629941529937,
                0.9395905426649875,
                0.014913878716159346,
                0.40259003555655115,
                0.557195192773853,
                0.01632811566056369,
                0.3466771445260475,
                0.19893756939247542,
                0.6950080973705011,
            ],
            "d": [
                0.1547015967490316,
                0.31132438133053797,
                0.7001013743133476,
                0.09104466592198956,
                0.68569162176846,
                0.23614155470907383,
                0.4293088456687334,
                0.28429662111659026,
                0.6448480462046265,
                0.5829896099870311,
            ],
        }
    )
    ops = describe_table(d, table_name="d").extend({"res": "a*-1 - 1*-b + c*-d"})
    expect = d.copy()
    expect["res"] = -d["c"] * d["d"] - d["a"] + d["b"]

    res_pandas = ops.transform(d)
    assert data_algebra.test_util.equivalent_frames(expect, res_pandas)

    data_algebra.test_util.check_transform(ops=ops, data=d, expect=expect)
