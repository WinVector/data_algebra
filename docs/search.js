window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "data_algebra", "modulename": "data_algebra", "kind": "module", "doc": "<p><code>data_algebra</code><a href=\"https://github.com/WinVector/data_algebra\">https://github.com/WinVector/data_algebra</a> is a piped data wrangling system\nbased on Codd's relational algebra and experience working with dplyr at scale.  The primary \npurpose of the package is to support an easy to compose and maintain grammar of data processing\nsteps that in turn can be used to generate database specific SQL.  The package also implements\nthe same transforms for Pandas and Polars DataFrames. </p>\n\n<p><code>R</code><a href=\"https://www.r-project.org\">https://www.r-project.org</a> versions of the system are available as \nthe <code>rquery</code><a href=\"https://github.com/WinVector/rquery\">https://github.com/WinVector/rquery</a> and <code>rqdatatable</code><a href=\"https://github.com/WinVector/rqdatatable\">https://github.com/WinVector/rqdatatable</a> packages.</p>\n"}, {"fullname": "data_algebra.BigQuery", "modulename": "data_algebra.BigQuery", "kind": "module", "doc": "<p>Adapter for Google BigQuery database</p>\n"}, {"fullname": "data_algebra.BigQuery.BigQueryModel", "modulename": "data_algebra.BigQuery", "qualname": "BigQueryModel", "kind": "class", "doc": "<p>A model of how SQL should be generated for BigQuery\nconnection should be google.cloud.bigquery.client.Client</p>\n", "bases": "data_algebra.db_model.DBModel"}, {"fullname": "data_algebra.BigQuery.BigQueryModel.__init__", "modulename": "data_algebra.BigQuery", "qualname": "BigQueryModel.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">table_prefix</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "data_algebra.BigQuery.BigQueryModel.get_table_name", "modulename": "data_algebra.BigQuery", "qualname": "BigQueryModel.get_table_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_description</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.BigQuery.BigQueryModel.quote_table_name", "modulename": "data_algebra.BigQuery", "qualname": "BigQueryModel.quote_table_name", "kind": "function", "doc": "<p>Quote a table name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_description</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.BigQuery.BigQueryModel.execute", "modulename": "data_algebra.BigQuery", "qualname": "BigQueryModel.execute", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong>:  database connection</li>\n<li><strong>q</strong>:  sql query</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.BigQuery.BigQueryModel.read_query", "modulename": "data_algebra.BigQuery", "qualname": "BigQueryModel.read_query", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong>:  database connection</li>\n<li><strong>q</strong>:  sql query</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>query results as table</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.BigQuery.BigQueryModel.insert_table", "modulename": "data_algebra.BigQuery", "qualname": "BigQueryModel.insert_table", "kind": "function", "doc": "<p>Insert a table.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong>:  a database connection</li>\n<li><strong>d</strong>:  a Pandas table</li>\n<li><strong>table_name</strong>:  name to give write to</li>\n<li><strong>qualifiers</strong>:  schema and such\n:param allow_overwrite logical, if True drop previous table</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"n\">table_name</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">qualifiers</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">allow_overwrite</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.BigQuery.BigQueryModel.db_handle", "modulename": "data_algebra.BigQuery", "qualname": "BigQueryModel.db_handle", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong>:  database connection</li>\n<li><strong>db_engine</strong>:  optional sqlalchemy style engine (for closing)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">db_engine</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.BigQuery.BigQuery_DBHandle", "modulename": "data_algebra.BigQuery", "qualname": "BigQuery_DBHandle", "kind": "class", "doc": "<p>Container for database connection handles.</p>\n", "bases": "data_algebra.db_model.DBHandle"}, {"fullname": "data_algebra.BigQuery.BigQuery_DBHandle.__init__", "modulename": "data_algebra.BigQuery", "qualname": "BigQuery_DBHandle.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  associated database model</li>\n<li><strong>conn</strong>:  database connection</li>\n<li><strong>db_engine</strong>:  optional sqlalchemy style engine (for closing)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">db_model</span><span class=\"o\">=</span><span class=\"n\">BigQueryModel</span>, </span><span class=\"param\"><span class=\"n\">conn</span></span>)</span>"}, {"fullname": "data_algebra.BigQuery.BigQuery_DBHandle.describe_bq_table", "modulename": "data_algebra.BigQuery", "qualname": "BigQuery_DBHandle.describe_bq_table", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">table_catalog</span>,</span><span class=\"param\">\t<span class=\"n\">table_schema</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span>,</span><span class=\"param\">\t<span class=\"n\">row_limit</span><span class=\"o\">=</span><span class=\"mi\">7</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">TableDescription</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.BigQuery.BigQuery_DBHandle.query_to_csv", "modulename": "data_algebra.BigQuery", "qualname": "BigQuery_DBHandle.query_to_csv", "kind": "function", "doc": "<p>Write query to csv</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">q</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">res_name</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.BigQuery.example_handle", "modulename": "data_algebra.BigQuery", "qualname": "example_handle", "kind": "function", "doc": "<p>Return an example db handle for testing. Returns None if helper packages not present.\nNote: binds in a data_catalog and data schema prefix. So this handle is specific\nto one database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.MySQL", "modulename": "data_algebra.MySQL", "kind": "module", "doc": "<p>Partial adapter of data algebra for MySQL. Not all data algebra operations are supported on this database at this time.</p>\n"}, {"fullname": "data_algebra.MySQL.MySQLModel", "modulename": "data_algebra.MySQL", "qualname": "MySQLModel", "kind": "class", "doc": "<p>A model of how SQL should be generated for MySQL.\nAssuming we are using a sqlalchemy engine as our connection.</p>\n", "bases": "data_algebra.db_model.DBModel"}, {"fullname": "data_algebra.MySQL.MySQLModel.__init__", "modulename": "data_algebra.MySQL", "qualname": "MySQLModel.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "data_algebra.MySQL.MySQLModel.quote_identifier", "modulename": "data_algebra.MySQL", "qualname": "MySQLModel.quote_identifier", "kind": "function", "doc": "<p>Quote identifier.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.MySQL.example_handle", "modulename": "data_algebra.MySQL", "qualname": "example_handle", "kind": "function", "doc": "<p>Return an example db handle for testing. Returns None if helper packages not present.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.OrderedSet", "modulename": "data_algebra.OrderedSet", "kind": "module", "doc": "<p>Ordered set to enhance presentation of column names.</p>\n\n<p>Adapted from: <a href=\"https://stackoverflow.com/a/1653978\">https://stackoverflow.com/a/1653978</a></p>\n"}, {"fullname": "data_algebra.OrderedSet.OrderedSet", "modulename": "data_algebra.OrderedSet", "qualname": "OrderedSet", "kind": "class", "doc": "<p>Ordered set to enhance presentation of column names.</p>\n", "bases": "collections.abc.MutableSet"}, {"fullname": "data_algebra.OrderedSet.OrderedSet.__init__", "modulename": "data_algebra.OrderedSet", "qualname": "OrderedSet.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "data_algebra.OrderedSet.OrderedSet.update", "modulename": "data_algebra.OrderedSet", "qualname": "OrderedSet.update", "kind": "function", "doc": "<p>add/replace elements</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.OrderedSet.OrderedSet.add", "modulename": "data_algebra.OrderedSet", "qualname": "OrderedSet.add", "kind": "function", "doc": "<p>add an element</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">elem</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.OrderedSet.OrderedSet.discard", "modulename": "data_algebra.OrderedSet", "qualname": "OrderedSet.discard", "kind": "function", "doc": "<p>delete an element</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">elem</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.OrderedSet.OrderedSet.copy", "modulename": "data_algebra.OrderedSet", "qualname": "OrderedSet.copy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.OrderedSet.OrderedSet.union", "modulename": "data_algebra.OrderedSet", "qualname": "OrderedSet.union", "kind": "function", "doc": "<p>create new set union</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.OrderedSet.ordered_intersect", "modulename": "data_algebra.OrderedSet", "qualname": "ordered_intersect", "kind": "function", "doc": "<p>Intersection of two iterables, ordered by a.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">OrderedSet</span><span class=\"o\">.</span><span class=\"n\">OrderedSet</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.OrderedSet.ordered_union", "modulename": "data_algebra.OrderedSet", "qualname": "ordered_union", "kind": "function", "doc": "<p>Union of two iterables, ordered by a first, then b.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">OrderedSet</span><span class=\"o\">.</span><span class=\"n\">OrderedSet</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.OrderedSet.ordered_diff", "modulename": "data_algebra.OrderedSet", "qualname": "ordered_diff", "kind": "function", "doc": "<p>a with b removed, a order preserved.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">OrderedSet</span><span class=\"o\">.</span><span class=\"n\">OrderedSet</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.PostgreSQL", "modulename": "data_algebra.PostgreSQL", "kind": "module", "doc": "<p>PostgreSQL database adapter for data algebra.</p>\n"}, {"fullname": "data_algebra.PostgreSQL.PostgreSQLModel", "modulename": "data_algebra.PostgreSQL", "qualname": "PostgreSQLModel", "kind": "class", "doc": "<p>A model of how SQL should be generated for PostgreSQL.\nAssuming we are using a sqlalchemy engine as our connection</p>\n", "bases": "data_algebra.db_model.DBModel"}, {"fullname": "data_algebra.PostgreSQL.PostgreSQLModel.__init__", "modulename": "data_algebra.PostgreSQL", "qualname": "PostgreSQLModel.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "data_algebra.PostgreSQL.example_handle", "modulename": "data_algebra.PostgreSQL", "qualname": "example_handle", "kind": "function", "doc": "<p>Return an example db handle for testing. Returns None if helper packages not present.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.SQLite", "modulename": "data_algebra.SQLite", "kind": "module", "doc": "<p>Adapt data_algebra to SQLite database.</p>\n"}, {"fullname": "data_algebra.SQLite.CollectingAgg", "modulename": "data_algebra.SQLite", "qualname": "CollectingAgg", "kind": "class", "doc": "<p>Aggregate from a collection. SQLite user class.</p>\n", "bases": "abc.ABC"}, {"fullname": "data_algebra.SQLite.CollectingAgg.step", "modulename": "data_algebra.SQLite", "qualname": "CollectingAgg.step", "kind": "function", "doc": "<p>Observe value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.SQLite.CollectingAgg.calc", "modulename": "data_algebra.SQLite", "qualname": "CollectingAgg.calc", "kind": "function", "doc": "<p>Perform the calculation (only called with non-trivial data)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.SQLite.CollectingAgg.finalize", "modulename": "data_algebra.SQLite", "qualname": "CollectingAgg.finalize", "kind": "function", "doc": "<p>Return result.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.SQLite.MedianAgg", "modulename": "data_algebra.SQLite", "qualname": "MedianAgg", "kind": "class", "doc": "<p>Aggregate as median. SQLite user class.</p>\n", "bases": "CollectingAgg"}, {"fullname": "data_algebra.SQLite.MedianAgg.__init__", "modulename": "data_algebra.SQLite", "qualname": "MedianAgg.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "data_algebra.SQLite.MedianAgg.calc", "modulename": "data_algebra.SQLite", "qualname": "MedianAgg.calc", "kind": "function", "doc": "<p>do it</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.SQLite.SampVarDevAgg", "modulename": "data_algebra.SQLite", "qualname": "SampVarDevAgg", "kind": "class", "doc": "<p>Aggregate as sample standard deviation. SQLite user class.\nThis version keeps the data instead of using the E[(x-E[x])^2] = E[x^2] - E[x]^2 formula</p>\n", "bases": "CollectingAgg"}, {"fullname": "data_algebra.SQLite.SampVarDevAgg.__init__", "modulename": "data_algebra.SQLite", "qualname": "SampVarDevAgg.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "data_algebra.SQLite.SampVarDevAgg.calc", "modulename": "data_algebra.SQLite", "qualname": "SampVarDevAgg.calc", "kind": "function", "doc": "<p>do it</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.SQLite.SampStdDevAgg", "modulename": "data_algebra.SQLite", "qualname": "SampStdDevAgg", "kind": "class", "doc": "<p>Aggregate as sample standard deviation. SQLite user class.\nThis version keeps the data instead of using the E[(x-E[x])^2] = E[x^2] - E[x]^2 formula</p>\n", "bases": "CollectingAgg"}, {"fullname": "data_algebra.SQLite.SampStdDevAgg.__init__", "modulename": "data_algebra.SQLite", "qualname": "SampStdDevAgg.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "data_algebra.SQLite.SampStdDevAgg.calc", "modulename": "data_algebra.SQLite", "qualname": "SampStdDevAgg.calc", "kind": "function", "doc": "<p>do it</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.SQLite.SQLiteModel", "modulename": "data_algebra.SQLite", "qualname": "SQLiteModel", "kind": "class", "doc": "<p>A model of how SQL should be generated for SQLite</p>\n", "bases": "data_algebra.db_model.DBModel"}, {"fullname": "data_algebra.SQLite.SQLiteModel.__init__", "modulename": "data_algebra.SQLite", "qualname": "SQLiteModel.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "data_algebra.SQLite.SQLiteModel.prepare_connection", "modulename": "data_algebra.SQLite", "qualname": "SQLiteModel.prepare_connection", "kind": "function", "doc": "<p>Insert user functions into db.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.SQLite.SQLiteModel.natural_join_to_near_sql", "modulename": "data_algebra.SQLite", "qualname": "SQLiteModel.natural_join_to_near_sql", "kind": "function", "doc": "<p>Translate a join into SQL, converting right and full joins to replacement code (as SQLite doesn't have these).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">join_node</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">left_is_first</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.SQLite.example_handle", "modulename": "data_algebra.SQLite", "qualname": "example_handle", "kind": "function", "doc": "<p>Return an example db handle for testing. Returns None if helper packages not present.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">db_model</span><span class=\"o\">.</span><span class=\"n\">DBHandle</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.SparkSQL", "modulename": "data_algebra.SparkSQL", "kind": "module", "doc": "<p>SparkSQL adapter for the data algebra.</p>\n"}, {"fullname": "data_algebra.SparkSQL.SparkConnection", "modulename": "data_algebra.SparkSQL", "qualname": "SparkConnection", "kind": "class", "doc": "<p>Holder for spark conext and session as a connection (defines close).</p>\n"}, {"fullname": "data_algebra.SparkSQL.SparkConnection.__init__", "modulename": "data_algebra.SparkSQL", "qualname": "SparkConnection.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">spark_context</span>, </span><span class=\"param\"><span class=\"n\">spark_session</span></span>)</span>"}, {"fullname": "data_algebra.SparkSQL.SparkConnection.close", "modulename": "data_algebra.SparkSQL", "qualname": "SparkConnection.close", "kind": "function", "doc": "<p>Stop context and release reference to context and session.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.SparkSQL.SparkSQLModel", "modulename": "data_algebra.SparkSQL", "qualname": "SparkSQLModel", "kind": "class", "doc": "<p>A model of how SQL should be generated for SparkSQL.</p>\n\n<p>Known issue: doesn't coalesce NaN</p>\n", "bases": "data_algebra.db_model.DBModel"}, {"fullname": "data_algebra.SparkSQL.SparkSQLModel.__init__", "modulename": "data_algebra.SparkSQL", "qualname": "SparkSQLModel.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "data_algebra.SparkSQL.SparkSQLModel.execute", "modulename": "data_algebra.SparkSQL", "qualname": "SparkSQLModel.execute", "kind": "function", "doc": "<p>Execute a SQL query or operator dag.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.SparkSQL.SparkSQLModel.read_query", "modulename": "data_algebra.SparkSQL", "qualname": "SparkSQLModel.read_query", "kind": "function", "doc": "<p>Execute a SQL query or operator dag, return result as Pandas data frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.SparkSQL.SparkSQLModel.insert_table", "modulename": "data_algebra.SparkSQL", "qualname": "SparkSQLModel.insert_table", "kind": "function", "doc": "<p>Insert table into database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"n\">table_name</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">qualifiers</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">allow_overwrite</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.SparkSQL.example_handle", "modulename": "data_algebra.SparkSQL", "qualname": "example_handle", "kind": "function", "doc": "<p>Return an example db handle for testing. Returns None if helper packages not present.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.arrow", "modulename": "data_algebra.arrow", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "data_algebra.arrow.Arrow", "modulename": "data_algebra.arrow", "qualname": "Arrow", "kind": "class", "doc": "<p>Arrow from category theory: see Steve Awody,\n\"Category Theory, 2nd Edition\", Oxford Univ. Press, 2010 pg. 4.\nEssentially this is a tool to expose associativity, without forcing\nthings to be a function to expose this effect.</p>\n", "bases": "abc.ABC"}, {"fullname": "data_algebra.arrow.Arrow.dom", "modulename": "data_algebra.arrow", "qualname": "Arrow.dom", "kind": "function", "doc": "<p>return domain, object at base of arrow</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.arrow.Arrow.cod", "modulename": "data_algebra.arrow", "qualname": "Arrow.cod", "kind": "function", "doc": "<p>return co-domain, object at head of arrow</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.arrow.Arrow.apply_to", "modulename": "data_algebra.arrow", "qualname": "Arrow.apply_to", "kind": "function", "doc": "<p>apply_to b, compose arrows (right to left)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.arrow.Arrow.act_on", "modulename": "data_algebra.arrow", "qualname": "Arrow.act_on", "kind": "function", "doc": "<p>act on X, must associate with composition</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.arrow.Arrow.transform", "modulename": "data_algebra.arrow", "qualname": "Arrow.transform", "kind": "function", "doc": "<p>transform X, may or may not associate with composition</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.arrow.DataOpArrow", "modulename": "data_algebra.arrow", "qualname": "DataOpArrow", "kind": "class", "doc": "<p>Represent a dag of operators as a categorical arrow.</p>\n", "bases": "Arrow"}, {"fullname": "data_algebra.arrow.DataOpArrow.__init__", "modulename": "data_algebra.arrow", "qualname": "DataOpArrow.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pipeline</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">free_table_key</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "data_algebra.arrow.DataOpArrow.get_feature_names", "modulename": "data_algebra.arrow", "qualname": "DataOpArrow.get_feature_names", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.arrow.DataOpArrow.apply_to", "modulename": "data_algebra.arrow", "qualname": "DataOpArrow.apply_to", "kind": "function", "doc": "<p>replace self input table with b</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.arrow.DataOpArrow.act_on", "modulename": "data_algebra.arrow", "qualname": "DataOpArrow.act_on", "kind": "function", "doc": "<p>act on X, must associate with composition</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.arrow.DataOpArrow.fit", "modulename": "data_algebra.arrow", "qualname": "DataOpArrow.fit", "kind": "function", "doc": "<p>Learn input and output types from example, and return self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.arrow.DataOpArrow.fit_transform", "modulename": "data_algebra.arrow", "qualname": "DataOpArrow.fit_transform", "kind": "function", "doc": "<p>Learn input and output types from example, and return transform.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.arrow.DataOpArrow.dom", "modulename": "data_algebra.arrow", "qualname": "DataOpArrow.dom", "kind": "function", "doc": "<p>return domain, object at base of arrow</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.arrow.DataOpArrow.dom_as_table", "modulename": "data_algebra.arrow", "qualname": "DataOpArrow.dom_as_table", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.arrow.DataOpArrow.cod", "modulename": "data_algebra.arrow", "qualname": "DataOpArrow.cod", "kind": "function", "doc": "<p>return co-domain, object at head of arrow</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.arrow.DataOpArrow.cod_as_table", "modulename": "data_algebra.arrow", "qualname": "DataOpArrow.cod_as_table", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.arrow.DataOpArrow.required_columns", "modulename": "data_algebra.arrow", "qualname": "DataOpArrow.required_columns", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.arrow.DataOpArrow.format_end_description", "modulename": "data_algebra.arrow", "qualname": "DataOpArrow.format_end_description", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">required_cols</span>, </span><span class=\"param\"><span class=\"n\">align_right</span><span class=\"o\">=</span><span class=\"mi\">70</span>, </span><span class=\"param\"><span class=\"n\">sep_width</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.arrow.fmt_as_arrow", "modulename": "data_algebra.arrow", "qualname": "fmt_as_arrow", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ops</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata", "modulename": "data_algebra.cdata", "kind": "module", "doc": "<p>Class for representing record structure transformations.</p>\n"}, {"fullname": "data_algebra.cdata.RecordSpecification", "modulename": "data_algebra.cdata", "qualname": "RecordSpecification", "kind": "class", "doc": "<p>Class to represent a multi-row data record.</p>\n"}, {"fullname": "data_algebra.cdata.RecordSpecification.__init__", "modulename": "data_algebra.cdata", "qualname": "RecordSpecification.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>control_table</strong>:  data.frame describing record layout</li>\n<li><strong>record_keys</strong>:  array of record key column names\ndefaults to no columns.</li>\n<li><strong>control_table_keys</strong>:  array of control_table key column names,\ndefaults to first column for non-trivial blocks and no columns for rows.</li>\n<li><strong>strict</strong>:  if True don't allow duplicate value names</li>\n<li><strong>local_data_model</strong>:  data.frame data model</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">control_table</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">record_keys</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">control_table_keys</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">strict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">local_data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "data_algebra.cdata.RecordSpecification.row_version", "modulename": "data_algebra.cdata", "qualname": "RecordSpecification.row_version", "kind": "function", "doc": "<p>Return copy of record as a row record.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>include_record_keys</strong>:  logical, if True include record keys as columns</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>column list</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">include_record_keys</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.RecordSpecification.fmt", "modulename": "data_algebra.cdata", "qualname": "RecordSpecification.fmt", "kind": "function", "doc": "<p>Prepare for printing</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>multi line string representation.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.RecordSpecification.map_to_rows", "modulename": "data_algebra.cdata", "qualname": "RecordSpecification.map_to_rows", "kind": "function", "doc": "<p>Build a RecordMap mapping this RecordSpecification to rowrecs</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>RecordMap</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.RecordSpecification.map_from_rows", "modulename": "data_algebra.cdata", "qualname": "RecordSpecification.map_from_rows", "kind": "function", "doc": "<p>Build a RecordMap mapping this RecordSpecification from rowrecs</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>RecordMap</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.RecordMap", "modulename": "data_algebra.cdata", "qualname": "RecordMap", "kind": "class", "doc": "<p>Class for specifying general record to record transforms.</p>\n"}, {"fullname": "data_algebra.cdata.RecordMap.__init__", "modulename": "data_algebra.cdata", "qualname": "RecordMap.__init__", "kind": "function", "doc": "<p>Build the transform specification. At least one of blocks_in or blocks_out must not be None.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>blocks_in</strong>:  incoming record specification, None for row-records.</li>\n<li><strong>blocks_out</strong>:  outgoing record specification, None for row-records.</li>\n<li><strong>strict</strong>:  if True insist block be strict, and in and out blocks agree on row-form columns.\u2202</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">blocks_in</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">cdata</span><span class=\"o\">.</span><span class=\"n\">RecordSpecification</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">blocks_out</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">cdata</span><span class=\"o\">.</span><span class=\"n\">RecordSpecification</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">strict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "data_algebra.cdata.RecordMap.record_keys", "modulename": "data_algebra.cdata", "qualname": "RecordMap.record_keys", "kind": "function", "doc": "<p>Return keys specifying which set of rows are in a record.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.RecordMap.input_control_table_key_columns", "modulename": "data_algebra.cdata", "qualname": "RecordMap.input_control_table_key_columns", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.RecordMap.output_control_table_key_columns", "modulename": "data_algebra.cdata", "qualname": "RecordMap.output_control_table_key_columns", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.RecordMap.example_input", "modulename": "data_algebra.cdata", "qualname": "RecordMap.example_input", "kind": "function", "doc": "<p>Return example output record.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>local_data_model</strong>:  optional Pandas data model.</li>\n<li><strong>value_suffix</strong>:  suffix to identify values</li>\n<li><strong>record_key_suffix</strong>:  suffix to identify record keys</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>example result data frame.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">local_data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">value_suffix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39; value&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">record_key_suffix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39; record key&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.RecordMap.transform", "modulename": "data_algebra.cdata", "qualname": "RecordMap.transform", "kind": "function", "doc": "<p>Transform X records.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  data frame to be transformed.</li>\n<li><strong>local_data_model</strong>:  pandas data model.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data frame.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">local_data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.RecordMap.compose", "modulename": "data_algebra.cdata", "qualname": "RecordMap.compose", "kind": "function", "doc": "<p>Experimental method to compose transforms\n(self.compose(other)).transform(data) == self.transform(other.transform(data))</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong>:  another data_algebra.cdata.RecordMap</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.RecordMap.inverse", "modulename": "data_algebra.cdata", "qualname": "RecordMap.inverse", "kind": "function", "doc": "<p>Return inverse transform, if there is such (duplicate value keys or mis-matching\nrow representations can prevent this).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.RecordMap.fmt", "modulename": "data_algebra.cdata", "qualname": "RecordMap.fmt", "kind": "function", "doc": "<p>Format for informal presentation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.RecordMap.fit", "modulename": "data_algebra.cdata", "qualname": "RecordMap.fit", "kind": "function", "doc": "<p>No-op (sklearn pipeline interface)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.RecordMap.fit_transform", "modulename": "data_algebra.cdata", "qualname": "RecordMap.fit_transform", "kind": "function", "doc": "<p>transform() (sklearn pipeline interface)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.RecordMap.get_feature_names", "modulename": "data_algebra.cdata", "qualname": "RecordMap.get_feature_names", "kind": "function", "doc": "<p>Return columns produced (sklearn pipeline interface)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_features</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.RecordMap.get_params", "modulename": "data_algebra.cdata", "qualname": "RecordMap.get_params", "kind": "function", "doc": "<p>Return emtpy dictionary (sklearn pipeline interface)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deep</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.RecordMap.set_params", "modulename": "data_algebra.cdata", "qualname": "RecordMap.set_params", "kind": "function", "doc": "<p>No-op (sklearn pipeline interface)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.RecordMap.inverse_transform", "modulename": "data_algebra.cdata", "qualname": "RecordMap.inverse_transform", "kind": "function", "doc": "<p>Perform inverse transform (sklearn pipeline interface)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.pivot_blocks_to_rowrecs", "modulename": "data_algebra.cdata", "qualname": "pivot_blocks_to_rowrecs", "kind": "function", "doc": "<p>Build a block records to row records map. This is very similar to a SQL pivot.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>attribute_key_column</strong>:  column to identify record attribute keys</li>\n<li><strong>attribute_value_column</strong>:  column for record attribute values</li>\n<li><strong>record_keys</strong>:  names of key columns identifying row record blocks</li>\n<li><strong>record_value_columns</strong>:  names of columns to take row record values from</li>\n<li><strong>local_data_model</strong>:  data.frame data model</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>RecordMap</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">attribute_key_column</span>,</span><span class=\"param\">\t<span class=\"n\">attribute_value_column</span>,</span><span class=\"param\">\t<span class=\"n\">record_keys</span>,</span><span class=\"param\">\t<span class=\"n\">record_value_columns</span>,</span><span class=\"param\">\t<span class=\"n\">local_data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.pivot_rowrecs_to_blocks", "modulename": "data_algebra.cdata", "qualname": "pivot_rowrecs_to_blocks", "kind": "function", "doc": "<p>Build a row records to block records map. This is very similar to a SQL unpivot.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>attribute_key_column</strong>:  column to identify record attribute keys</li>\n<li><strong>attribute_value_column</strong>:  column for record attribute values</li>\n<li><strong>record_keys</strong>:  names of key columns identifying row record blocks</li>\n<li><strong>record_value_columns</strong>:  names of columns to take row record values from</li>\n<li><strong>local_data_model</strong>:  data.frame data model</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>RecordMap</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">attribute_key_column</span>,</span><span class=\"param\">\t<span class=\"n\">attribute_value_column</span>,</span><span class=\"param\">\t<span class=\"n\">record_keys</span>,</span><span class=\"param\">\t<span class=\"n\">record_value_columns</span>,</span><span class=\"param\">\t<span class=\"n\">local_data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.pivot_specification", "modulename": "data_algebra.cdata", "qualname": "pivot_specification", "kind": "function", "doc": "<p>Specify the cdata transformation that pivots records from a single column of values into collected rows.\n<a href=\"https://en.wikipedia.org/wiki/Pivot_table#History\">https://en.wikipedia.org/wiki/Pivot_table#History</a></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>row_keys</strong>:  columns that identify rows in the incoming data set</li>\n<li><strong>col_name_key</strong>:  column name to take the names of columns as a column</li>\n<li><strong>col_value_key</strong>:  column name to take the values in columns as a column</li>\n<li><strong>value_cols</strong>:  columns to place values in</li>\n<li><strong>local_data_model</strong>:  data.frame data model</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>RecordSpecification</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">row_keys</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">col_name_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;column_name&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">col_value_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;column_value&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">value_cols</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">local_data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">cdata</span><span class=\"o\">.</span><span class=\"n\">RecordMap</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.cdata.unpivot_specification", "modulename": "data_algebra.cdata", "qualname": "unpivot_specification", "kind": "function", "doc": "<p>Specify the cdata transformation that un-pivots records into a single column of values plus keys.\n<a href=\"https://en.wikipedia.org/wiki/Pivot_table#History\">https://en.wikipedia.org/wiki/Pivot_table#History</a></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>row_keys</strong>:  columns that identify rows in the incoming data set</li>\n<li><strong>col_name_key</strong>:  column name to land the names of columns as a column</li>\n<li><strong>col_value_key</strong>:  column name to land the values in columns as a column</li>\n<li><strong>value_cols</strong>:  columns to take values from</li>\n<li><strong>local_data_model</strong>:  data.frame data model</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>RecordSpecification</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">row_keys</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">col_name_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;column_name&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">col_value_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;column_value&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">value_cols</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">local_data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">cdata</span><span class=\"o\">.</span><span class=\"n\">RecordMap</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.connected_components", "modulename": "data_algebra.connected_components", "kind": "module", "doc": "<p>Code for computing collected components.</p>\n"}, {"fullname": "data_algebra.connected_components.Component", "modulename": "data_algebra.connected_components", "qualname": "Component", "kind": "class", "doc": "<p>Holder for a connected component.</p>\n"}, {"fullname": "data_algebra.connected_components.Component.__init__", "modulename": "data_algebra.connected_components", "qualname": "Component.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">item</span></span>)</span>"}, {"fullname": "data_algebra.connected_components.connected_components", "modulename": "data_algebra.connected_components", "qualname": "connected_components", "kind": "function", "doc": "<p>Compute connected components of undirected edges (f[i], g[i]).</p>\n\n<p>For the return value we are using the\ncategory formulation that these are the co-equalizer of f and g,\nmeaning it is a finest partition such that return[f[i]] = return[g[i]]\nfor all i.  We pick the least item in each component as the representation.\nThis is just a long way of saying: as each side of an edge is in the same\ncomponent, we return the assignment by labeling the edges by components\n(instead of the vertices).</p>\n\n<p>Not as fast as union/find but fast.</p>\n\n<p>f = [1, 4, 6, 2, 1]\ng = [2, 5, 7, 3, 7]\nres = connected_components(f, g)\nprint(res)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>f</strong>:  list or vector of hashable/comparable items of length n</li>\n<li><strong>g</strong>:  list or vector of hashable/comparable items of length n</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of assignments of length n (map both f and g to same values.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">g</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model", "modulename": "data_algebra.data_model", "kind": "module", "doc": "<p>Interface for realizing the data algebra as a sequence of steps over an object.</p>\n"}, {"fullname": "data_algebra.data_model.DataModel", "modulename": "data_algebra.data_model", "qualname": "DataModel", "kind": "class", "doc": "<p>Interface for realizing the data algebra as a sequence of steps over Pandas like objects.</p>\n", "bases": "abc.ABC"}, {"fullname": "data_algebra.data_model.DataModel.data_frame", "modulename": "data_algebra.data_model", "qualname": "DataModel.data_frame", "kind": "function", "doc": "<p>Build a new data frame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arg</strong>:  optional argument passed to constructor.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data frame</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">arg</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model.DataModel.is_appropriate_data_instance", "modulename": "data_algebra.data_model", "qualname": "DataModel.is_appropriate_data_instance", "kind": "function", "doc": "<p>Check if df is our type of data frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model.DataModel.clean_copy", "modulename": "data_algebra.data_model", "qualname": "DataModel.clean_copy", "kind": "function", "doc": "<p>Copy of data frame without indices.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model.DataModel.to_pandas", "modulename": "data_algebra.data_model", "qualname": "DataModel.to_pandas", "kind": "function", "doc": "<p>Convert to Pandas</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model.DataModel.drop_indices", "modulename": "data_algebra.data_model", "qualname": "DataModel.drop_indices", "kind": "function", "doc": "<p>Drop indices in place.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model.DataModel.bad_column_positions", "modulename": "data_algebra.data_model", "qualname": "DataModel.bad_column_positions", "kind": "function", "doc": "<p>Return vector indicating which entries are bad (null or nan) (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model.DataModel.table_is_keyed_by_columns", "modulename": "data_algebra.data_model", "qualname": "DataModel.table_is_keyed_by_columns", "kind": "function", "doc": "<p>Check if a table is keyed by a given list of column names.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>table</strong>:  DataFrame</li>\n<li><strong>column_names</strong>:  list of column names</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if rows are uniquely keyed by values in named columns</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">column_names</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model.DataModel.concat_rows", "modulename": "data_algebra.data_model", "qualname": "DataModel.concat_rows", "kind": "function", "doc": "<p>Concatenate rows from frame_list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">frame_list</span><span class=\"p\">:</span> <span class=\"n\">List</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model.DataModel.concat_columns", "modulename": "data_algebra.data_model", "qualname": "DataModel.concat_columns", "kind": "function", "doc": "<p>Concatenate columns from frame_list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">frame_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model.DataModel.get_cell", "modulename": "data_algebra.data_model", "qualname": "DataModel.get_cell", "kind": "function", "doc": "<p>get a value from a cell</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">colname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model.DataModel.set_col", "modulename": "data_algebra.data_model", "qualname": "DataModel.set_col", "kind": "function", "doc": "<p>set column, return ref</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"n\">colname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model.DataModel.eval", "modulename": "data_algebra.data_model", "qualname": "DataModel.eval", "kind": "function", "doc": "<p>Implementation of Pandas evaluation of operators</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>op</strong>:  ViewRepresentation to evaluate</li>\n<li><strong>data_map</strong>:  dictionary mapping table and view names to data frames</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data frame result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">op</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">data_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model.DataModel.blocks_to_rowrecs", "modulename": "data_algebra.data_model", "qualname": "DataModel.blocks_to_rowrecs", "kind": "function", "doc": "<p>Convert a block record (record spanning multiple rows) into a rowrecord (record in a single row).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  data frame to be transformed</li>\n<li><strong>blocks_in</strong>:  cdata record specification</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data frame</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">blocks_in</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model.DataModel.rowrecs_to_blocks", "modulename": "data_algebra.data_model", "qualname": "DataModel.rowrecs_to_blocks", "kind": "function", "doc": "<p>Convert rowrecs (single row records) into block records (multiple row records).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  data frame to transform.</li>\n<li><strong>blocks_out</strong>:  cdata record specification.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data frame</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">blocks_out</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model.default_data_model", "modulename": "data_algebra.data_model", "qualname": "default_data_model", "kind": "function", "doc": "<p>Get the default (Pandas) data model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_model</span><span class=\"o\">.</span><span class=\"n\">DataModel</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model.lookup_data_model_for_key", "modulename": "data_algebra.data_model", "qualname": "lookup_data_model_for_key", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_model</span><span class=\"o\">.</span><span class=\"n\">DataModel</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model.lookup_data_model_for_dataframe", "modulename": "data_algebra.data_model", "qualname": "lookup_data_model_for_dataframe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_model</span><span class=\"o\">.</span><span class=\"n\">DataModel</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model_space", "modulename": "data_algebra.data_model_space", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "data_algebra.data_model_space.DataModelSpace", "modulename": "data_algebra.data_model_space", "qualname": "DataModelSpace", "kind": "class", "doc": "<p>A data space as a map of mapped data_model data frames.</p>\n", "bases": "data_algebra.data_space.DataSpace"}, {"fullname": "data_algebra.data_model_space.DataModelSpace.__init__", "modulename": "data_algebra.data_model_space", "qualname": "DataModelSpace.__init__", "kind": "function", "doc": "<p>Build an isolated execution space. Good for enforcing different data model adaptors or alternatives.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_model</strong>:  execution model</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_model</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_model</span><span class=\"o\">.</span><span class=\"n\">DataModel</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "data_algebra.data_model_space.DataModelSpace.insert", "modulename": "data_algebra.data_model_space", "qualname": "DataModelSpace.insert", "kind": "function", "doc": "<p>Insert value into data space for key.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong>:  key</li>\n<li><strong>value</strong>:  data</li>\n<li><strong>allow_overwrite</strong>:  if True, allow table replacement</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table description</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">value</span>,</span><span class=\"param\">\t<span class=\"n\">allow_overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">TableDescription</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model_space.DataModelSpace.remove", "modulename": "data_algebra.data_model_space", "qualname": "DataModelSpace.remove", "kind": "function", "doc": "<p>Remove value from data space.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong>:  key to remove</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model_space.DataModelSpace.keys", "modulename": "data_algebra.data_model_space", "qualname": "DataModelSpace.keys", "kind": "function", "doc": "<p>Return keys</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model_space.DataModelSpace.retrieve", "modulename": "data_algebra.data_model_space", "qualname": "DataModelSpace.retrieve", "kind": "function", "doc": "<p>Retrieve a table value from the DataSpace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong>:  key</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model_space.DataModelSpace.execute", "modulename": "data_algebra.data_model_space", "qualname": "DataModelSpace.execute", "kind": "function", "doc": "<p>Execute ops in data space, saving result as a side effect and returning a reference.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ops</strong>:  data algebra operator dag.</li>\n<li><strong>key</strong>:  name for result</li>\n<li><strong>allow_overwrite</strong>:  if True allow table replacement</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data key</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ops</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">allow_overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">TableDescription</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model_space.DataModelSpace.describe", "modulename": "data_algebra.data_model_space", "qualname": "DataModelSpace.describe", "kind": "function", "doc": "<p>Retrieve a table description from the DataSpace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong>:  key</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data description</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">TableDescription</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_model_space.DataModelSpace.close", "modulename": "data_algebra.data_model_space", "qualname": "DataModelSpace.close", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops", "modulename": "data_algebra.data_ops", "kind": "module", "doc": "<p>Realization of data operations.</p>\n"}, {"fullname": "data_algebra.data_ops.pretty_format_python", "modulename": "data_algebra.data_ops", "qualname": "pretty_format_python", "kind": "function", "doc": "<p>Format Python code, using black.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>python_str</strong>:  Python code</li>\n<li><strong>black_mode</strong>:  options for black</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>formatted Python code</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">python_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">black_mode</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation", "kind": "class", "doc": "<p>Structure to represent the columns of a query or a table.\nAbstract base class.</p>\n", "bases": "data_algebra.data_ops_types.OperatorPlatform, abc.ABC"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.column_map", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.column_map", "kind": "function", "doc": "<p>Build a map of column names to ColumnReferences</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">OrderedDict</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.merged_rep_id", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.merged_rep_id", "kind": "function", "doc": "<p>String key for lookups.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.ex", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.ex", "kind": "function", "doc": "<p>Evaluate operators with respect to Pandas data frames already stored in the operator chain.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_model</strong>:  adaptor to data dialect (Pandas for now)</li>\n<li><strong>allow_limited_tables</strong>:  logical, if True allow execution on non-complete tables</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">allow_limited_tables</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.get_tables", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.get_tables", "kind": "function", "doc": "<p>Get a dictionary of all tables used in an operator DAG,\nraise an exception if the values are not consistent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.columns_used_from_sources", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.columns_used_from_sources", "kind": "function", "doc": "<p>Get columns used from sources. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>using</strong>:  optional column restriction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of order sets (list parallel to sources).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">using</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.methods_used", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.methods_used", "kind": "function", "doc": "<p>Return set of methods used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops_types</span><span class=\"o\">.</span><span class=\"n\">MethodUse</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.get_method_uses_", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.get_method_uses_", "kind": "function", "doc": "<p>Implementation of get methods_used(), internal method.</p>\n\n<p>:params methods_seen: set to collect results in.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">methods_seen</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops_types</span><span class=\"o\">.</span><span class=\"n\">MethodUse</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.columns_produced", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.columns_produced", "kind": "function", "doc": "<p>Return list of columns produced by operator dag.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.columns_used_implementation_", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.columns_used_implementation_", "kind": "function", "doc": "<p>Implementation of columns used calculation, internal method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">using</span>, </span><span class=\"param\"><span class=\"n\">columns_currently_using_records</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.columns_used", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.columns_used", "kind": "function", "doc": "<p>Determine which columns are used from source tables.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.to_python_src_", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.to_python_src_", "kind": "function", "doc": "<p>Return text representing operations. Internal method, allows skipping of sources.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>indent</strong>:  additional indent to apply in formatting.</li>\n<li><strong>strict</strong>:  if False allow eliding of columns names and other long structures.</li>\n<li><strong>print_sources</strong>:  logical, print children.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">print_sources</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.to_python", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.to_python", "kind": "function", "doc": "<p>Return Python source code for operations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>indent</strong>:  extra indent.</li>\n<li><strong>strict</strong>:  if False allow eliding of columns names and other long structures.</li>\n<li><strong>pretty</strong>:  if True re-format result with black.</li>\n<li><strong>black_mode</strong>:  black formatter parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">pretty</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">black_mode</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.act_on", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.act_on", "kind": "function", "doc": "<p>apply self to X, must associate with composition\nOperator is strict about column names.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  input data frame\n:param data_model implementation to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.to_near_sql_implementation_", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.to_near_sql_implementation_", "kind": "function", "doc": "<p>Convert operator dag into NearSQL type for translation to SQL string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  database model</li>\n<li><strong>using</strong>:  optional column restriction set</li>\n<li><strong>temp_id_source</strong>:  source of temporary ids</li>\n<li><strong>sql_format_options</strong>:  options for sql formatting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data_algebra.near_sql.NearSQL</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.to_sql", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.to_sql", "kind": "function", "doc": "<p>Convert operator dag to SQL.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  database model or handle data_algebra.db_model.DBModel or data_algebra.db_model.DBHandle</li>\n<li><strong>sql_format_options</strong>:  options for sql formatting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>string representation of SQL query</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">db_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.check_constraints", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.check_constraints", "kind": "function", "doc": "<p>Check tables supplied meet data consistency constraints.</p>\n\n<p>data_map: dictionary of column name lists.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_map</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.eval", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.eval", "kind": "function", "doc": "<p>Evaluate operators with respect to Pandas data frames.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_map</strong>:  map from table names to data frames or data sources</li>\n<li><strong>data_model</strong>:  adaptor to data dialect (Pandas for now)</li>\n<li><strong>strict</strong>:  if True, throw on unexpected columns</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">strict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.transform", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.transform", "kind": "function", "doc": "<p>Apply data transform to a table</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  tale to apply to</li>\n<li><strong>data_model</strong>:  data model for Pandas execution</li>\n<li><strong>strict</strong>:  if True, throw on unexpected columns</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data frame</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.is_trivial_when_intermediate_", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.is_trivial_when_intermediate_", "kind": "function", "doc": "<p>Return if True if operator can be eliminated from interior chain.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.as_table_description", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.as_table_description", "kind": "function", "doc": "<p>Return representation of operator as a table description.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>table_name</strong>:  table name to use.</li>\n<li><strong>qualifiers</strong>:  db qualifiers to annotate</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">qualifiers</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.extend_parsed_", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.extend_parsed_", "kind": "function", "doc": "<p>Add new derived columns, can replace existing columns for parsed operations. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parsed_ops</strong>:  dictionary of calculations to perform.</li>\n<li><strong>partition_by</strong>:  optional window partition specification, or 1.</li>\n<li><strong>order_by</strong>:  optional window ordering specification, or 1.</li>\n<li><strong>reverse</strong>:  optional order reversal specification.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_ops</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">partition_by</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.extend", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.extend", "kind": "function", "doc": "<p>Add new derived columns, can replace existing columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ops</strong>:  dictionary of calculations to perform.</li>\n<li><strong>partition_by</strong>:  optional window partition specification, or 1.</li>\n<li><strong>order_by</strong>:  optional window ordering specification, or 1.</li>\n<li><strong>reverse</strong>:  optional order reversal specification.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ops</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">partition_by</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.project_parsed_", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.project_parsed_", "kind": "function", "doc": "<p>Compute projection, or grouped calculation for parsed ops. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parsed_ops</strong>:  dictionary of calculations to perform, can be empty.</li>\n<li><strong>group_by</strong>:  optional group key(s) specification.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_ops</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">group_by</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.project", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.project", "kind": "function", "doc": "<p>Compute projection, or grouped calculation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ops</strong>:  dictionary of calculations to perform, can be empty.</li>\n<li><strong>group_by</strong>:  optional group key(s) specification.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ops</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">group_by</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.natural_join", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.natural_join", "kind": "function", "doc": "<p>Join self (left) results with b (right).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>b</strong>:  second or right table to join to.</li>\n<li><strong>on</strong>:  column names to enforce equality on (list of column names, list of tuples, or dictionary)</li>\n<li><strong>jointype</strong>:  name of join type.</li>\n<li><strong>check_all_common_keys_in_equi_spec</strong>:  if True, raise if any non-equality key columns are common to tables.</li>\n<li><strong>by</strong>:  synonym for on, only set at most one of on or by (deprecated).</li>\n<li><strong>check_all_common_keys_in_by</strong>:  synonym for check_all_common_keys_in_equi_spec (deprecated).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">b</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">on</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">jointype</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">check_all_common_keys_in_equi_spec</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">by</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">check_all_common_keys_in_by</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.concat_rows", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.concat_rows", "kind": "function", "doc": "<p>Union or concatenate rows of self with rows of b.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>b</strong>:  table with rows to add.</li>\n<li><strong>id_column</strong>:  optional name for new source identification column.</li>\n<li><strong>a_name</strong>:  source annotation to use for self/a.</li>\n<li><strong>b_name</strong>:  source annotation to use for b.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">b</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">id_column</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_name&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;a&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">b_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;b&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.select_rows_parsed_", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.select_rows_parsed_", "kind": "function", "doc": "<p>Select rows matching parsed expr criteria. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parsed_expr</strong>:  logical expression specifying desired rows.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parsed_expr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.select_rows", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.select_rows", "kind": "function", "doc": "<p>Select rows matching expr criteria.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>expr</strong>:  logical expression specifying desired rows.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">expr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.drop_columns", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.drop_columns", "kind": "function", "doc": "<p>Remove columns from result.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>column_deletions</strong>:  list of columns to remove.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column_deletions</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.select_columns", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.select_columns", "kind": "function", "doc": "<p>Narrow to columns in result.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>columns</strong>:  list of columns to keep.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">columns</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.map_columns", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.map_columns", "kind": "function", "doc": "<p>Map column names or rename.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>column_remapping</strong>:  dictionary mapping old column sources to new column names (same\ndirection as Pandas rename).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column_remapping</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.rename_columns", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.rename_columns", "kind": "function", "doc": "<p>Rename columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>column_remapping</strong>:  dictionary mapping new column names to old column sources (same\ndirection as extend).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column_remapping</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.order_rows", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.order_rows", "kind": "function", "doc": "<p>Order rows by column set.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>columns</strong>:  columns to order by.</li>\n<li><strong>reverse</strong>:  optional columns to reverse order.</li>\n<li><strong>limit</strong>:  optional row limit to impose on result.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ViewRepresentation.convert_records", "modulename": "data_algebra.data_ops", "qualname": "ViewRepresentation.convert_records", "kind": "function", "doc": "<p>Apply a record mapping taking blocks_in to blocks_out structures.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>record_map</strong>:  data_algebra.cdata.RecordMap transform specification</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_map</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.TableDescription", "modulename": "data_algebra.data_ops", "qualname": "TableDescription", "kind": "class", "doc": "<p>Describe columns, and qualifiers, of a table.</p>\n\n<p>Example:\n    from data_algebra.data_ops import *\n    d = TableDescription(table_name='d', column_names=['x', 'y'])\n    print(d)</p>\n", "bases": "ViewRepresentation"}, {"fullname": "data_algebra.data_ops.TableDescription.__init__", "modulename": "data_algebra.data_ops", "qualname": "TableDescription.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">column_names</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">qualifiers</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sql_meta</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">head</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">limit_was</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nrows</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "data_algebra.data_ops.TableDescription.same_table_description_", "modulename": "data_algebra.data_ops", "qualname": "TableDescription.same_table_description_", "kind": "function", "doc": "<p>Return true if other is a description of the same table. Internal method, ingores data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.TableDescription.merged_rep_id", "modulename": "data_algebra.data_ops", "qualname": "TableDescription.merged_rep_id", "kind": "function", "doc": "<p>String key for lookups.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.TableDescription.replace_leaves", "modulename": "data_algebra.data_ops", "qualname": "TableDescription.replace_leaves", "kind": "function", "doc": "<p>Replace leaves of DAG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>:  operators to apply to\n:param replacement_map, table/sqlkeys mapped to replacement Operator platforms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new operator DAG</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">replacement_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.TableDescription.to_python_src_", "modulename": "data_algebra.data_ops", "qualname": "TableDescription.to_python_src_", "kind": "function", "doc": "<p>Return text representing operations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>indent</strong>:  additional indent to apply in formatting.</li>\n<li><strong>strict</strong>:  if False allow eliding of columns names and other long structures.</li>\n<li><strong>print_sources</strong>:  logical, print children.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">print_sources</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.TableDescription.get_tables", "modulename": "data_algebra.data_ops", "qualname": "TableDescription.get_tables", "kind": "function", "doc": "<p>get a dictionary of all tables used in an operator DAG,\nraise an exception if the values are not consistent</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.TableDescription.columns_used_from_sources", "modulename": "data_algebra.data_ops", "qualname": "TableDescription.columns_used_from_sources", "kind": "function", "doc": "<p>Get columns used from sources. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>using</strong>:  optional column restriction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of order sets (list parallel to sources).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">using</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.TableDescription.to_near_sql_implementation_", "modulename": "data_algebra.data_ops", "qualname": "TableDescription.to_near_sql_implementation_", "kind": "function", "doc": "<p>Convert operator dag into NearSQL type for translation to SQL string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  database model</li>\n<li><strong>using</strong>:  optional column restriction set</li>\n<li><strong>temp_id_source</strong>:  source of temporary ids</li>\n<li><strong>sql_format_options</strong>:  options for sql formatting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data_algebra.near_sql.NearSQL</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.describe_table", "modulename": "data_algebra.data_ops", "qualname": "describe_table", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d</strong>:  data table table to describe</li>\n<li><strong>table_name</strong>:  name of table</li>\n<li><strong>qualifiers</strong>:  optional, able qualifiers</li>\n<li><strong>sql_meta</strong>:  optional, sql meta information map</li>\n<li><strong>row_limit</strong>:  how many rows to sample</li>\n<li><strong>keep_sample</strong>:  logical, if True retain head of table</li>\n<li><strong>keep_all</strong>:  logical, if True retain all of table</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>TableDescription</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">d</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">qualifiers</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sql_meta</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">row_limit</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>,</span><span class=\"param\">\t<span class=\"n\">keep_sample</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">keep_all</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">TableDescription</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.table", "modulename": "data_algebra.data_ops", "qualname": "table", "kind": "function", "doc": "<p>Capture a table for later use</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d</strong>:  Pandas data frame to capture</li>\n<li><strong>table_name</strong>:  name for this table</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a table description, with values retained</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.descr", "modulename": "data_algebra.data_ops", "qualname": "descr", "kind": "function", "doc": "<p>Capture a named partial table as a description.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>:  exactly one named table of the form table_name=table_value</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a table description (not all values retained)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.data", "modulename": "data_algebra.data_ops", "qualname": "data", "kind": "function", "doc": "<p>Capture a full table for later use. Exactly one of args/kwags can be set.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  at most one unnamed table of the form table_name=table_value</li>\n<li><strong>kwargs</strong>:  at most one named table of the form table_name=table_value</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a table description, with all values retained</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ExtendNode", "modulename": "data_algebra.data_ops", "qualname": "ExtendNode", "kind": "class", "doc": "<p>Class representation of .extend() method/step.</p>\n", "bases": "ViewRepresentation"}, {"fullname": "data_algebra.data_ops.ExtendNode.__init__", "modulename": "data_algebra.data_ops", "qualname": "ExtendNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">source</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_ops</span>,</span><span class=\"param\">\t<span class=\"n\">partition_by</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "data_algebra.data_ops.ExtendNode.replace_leaves", "modulename": "data_algebra.data_ops", "qualname": "ExtendNode.replace_leaves", "kind": "function", "doc": "<p>Replace leaves of DAG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>:  operators to apply to\n:param replacement_map, table/sqlkeys mapped to replacement Operator platforms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new operator DAG</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">replacement_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ExtendNode.get_method_uses_", "modulename": "data_algebra.data_ops", "qualname": "ExtendNode.get_method_uses_", "kind": "function", "doc": "<p>Implementation of get methods_used(), internal method.</p>\n\n<p>:params methods_seen: set to collect results in.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">methods_seen</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops_types</span><span class=\"o\">.</span><span class=\"n\">MethodUse</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ExtendNode.check_extend_window_fns_", "modulename": "data_algebra.data_ops", "qualname": "ExtendNode.check_extend_window_fns_", "kind": "function", "doc": "<p>Confirm extend functions are all compatible with windowing in Pandas. Internal function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ExtendNode.columns_used_from_sources", "modulename": "data_algebra.data_ops", "qualname": "ExtendNode.columns_used_from_sources", "kind": "function", "doc": "<p>Get columns used from sources. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>using</strong>:  optional column restriction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of order sets (list parallel to sources).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">using</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ExtendNode.to_python_src_", "modulename": "data_algebra.data_ops", "qualname": "ExtendNode.to_python_src_", "kind": "function", "doc": "<p>Return text representing operations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>indent</strong>:  additional indent to apply in formatting.</li>\n<li><strong>strict</strong>:  if False allow eliding of columns names and other long structures.</li>\n<li><strong>print_sources</strong>:  logical, print children.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">print_sources</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ExtendNode.to_near_sql_implementation_", "modulename": "data_algebra.data_ops", "qualname": "ExtendNode.to_near_sql_implementation_", "kind": "function", "doc": "<p>Convert operator dag into NearSQL type for translation to SQL string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  database model</li>\n<li><strong>using</strong>:  optional column restriction set</li>\n<li><strong>temp_id_source</strong>:  source of temporary ids</li>\n<li><strong>sql_format_options</strong>:  options for sql formatting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data_algebra.near_sql.NearSQL</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ProjectNode", "modulename": "data_algebra.data_ops", "qualname": "ProjectNode", "kind": "class", "doc": "<p>Class representation of .project() method/step.</p>\n", "bases": "ViewRepresentation"}, {"fullname": "data_algebra.data_ops.ProjectNode.__init__", "modulename": "data_algebra.data_ops", "qualname": "ProjectNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">parsed_ops</span>, </span><span class=\"param\"><span class=\"n\">group_by</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "data_algebra.data_ops.ProjectNode.get_method_uses_", "modulename": "data_algebra.data_ops", "qualname": "ProjectNode.get_method_uses_", "kind": "function", "doc": "<p>Implementation of get methods_used(), internal method.</p>\n\n<p>:params methods_seen: set to collect results in.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">methods_seen</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops_types</span><span class=\"o\">.</span><span class=\"n\">MethodUse</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ProjectNode.replace_leaves", "modulename": "data_algebra.data_ops", "qualname": "ProjectNode.replace_leaves", "kind": "function", "doc": "<p>Replace leaves of DAG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>:  operators to apply to\n:param replacement_map, table/sqlkeys mapped to replacement Operator platforms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new operator DAG</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">replacement_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ProjectNode.columns_used_from_sources", "modulename": "data_algebra.data_ops", "qualname": "ProjectNode.columns_used_from_sources", "kind": "function", "doc": "<p>Get columns used from sources. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>using</strong>:  optional column restriction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of order sets (list parallel to sources).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">using</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ProjectNode.to_python_src_", "modulename": "data_algebra.data_ops", "qualname": "ProjectNode.to_python_src_", "kind": "function", "doc": "<p>Return text representing operations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>indent</strong>:  additional indent to apply in formatting.</li>\n<li><strong>strict</strong>:  if False allow eliding of columns names and other long structures.</li>\n<li><strong>print_sources</strong>:  logical, print children.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">print_sources</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ProjectNode.to_near_sql_implementation_", "modulename": "data_algebra.data_ops", "qualname": "ProjectNode.to_near_sql_implementation_", "kind": "function", "doc": "<p>Convert operator dag into NearSQL type for translation to SQL string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  database model</li>\n<li><strong>using</strong>:  optional column restriction set</li>\n<li><strong>temp_id_source</strong>:  source of temporary ids</li>\n<li><strong>sql_format_options</strong>:  options for sql formatting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data_algebra.near_sql.NearSQL</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.SelectRowsNode", "modulename": "data_algebra.data_ops", "qualname": "SelectRowsNode", "kind": "class", "doc": "<p>Class representation of .select() method/step.</p>\n", "bases": "ViewRepresentation"}, {"fullname": "data_algebra.data_ops.SelectRowsNode.__init__", "modulename": "data_algebra.data_ops", "qualname": "SelectRowsNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">ops</span></span>)</span>"}, {"fullname": "data_algebra.data_ops.SelectRowsNode.get_method_uses_", "modulename": "data_algebra.data_ops", "qualname": "SelectRowsNode.get_method_uses_", "kind": "function", "doc": "<p>Implementation of get methods_used(), internal method.</p>\n\n<p>:params methods_seen: set to collect results in.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">methods_seen</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops_types</span><span class=\"o\">.</span><span class=\"n\">MethodUse</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.SelectRowsNode.replace_leaves", "modulename": "data_algebra.data_ops", "qualname": "SelectRowsNode.replace_leaves", "kind": "function", "doc": "<p>Replace leaves of DAG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>:  operators to apply to\n:param replacement_map, table/sqlkeys mapped to replacement Operator platforms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new operator DAG</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">replacement_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.SelectRowsNode.columns_used_from_sources", "modulename": "data_algebra.data_ops", "qualname": "SelectRowsNode.columns_used_from_sources", "kind": "function", "doc": "<p>Get columns used from sources. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>using</strong>:  optional column restriction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of order sets (list parallel to sources).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">using</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.SelectRowsNode.to_python_src_", "modulename": "data_algebra.data_ops", "qualname": "SelectRowsNode.to_python_src_", "kind": "function", "doc": "<p>Return text representing operations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>indent</strong>:  additional indent to apply in formatting.</li>\n<li><strong>strict</strong>:  if False allow eliding of columns names and other long structures.</li>\n<li><strong>print_sources</strong>:  logical, print children.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">print_sources</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.SelectRowsNode.to_near_sql_implementation_", "modulename": "data_algebra.data_ops", "qualname": "SelectRowsNode.to_near_sql_implementation_", "kind": "function", "doc": "<p>Convert operator dag into NearSQL type for translation to SQL string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  database model</li>\n<li><strong>using</strong>:  optional column restriction set</li>\n<li><strong>temp_id_source</strong>:  source of temporary ids</li>\n<li><strong>sql_format_options</strong>:  options for sql formatting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data_algebra.near_sql.NearSQL</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.SelectColumnsNode", "modulename": "data_algebra.data_ops", "qualname": "SelectColumnsNode", "kind": "class", "doc": "<p>Class representation of .select_columns() method/step.</p>\n", "bases": "ViewRepresentation"}, {"fullname": "data_algebra.data_ops.SelectColumnsNode.__init__", "modulename": "data_algebra.data_ops", "qualname": "SelectColumnsNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">columns</span></span>)</span>"}, {"fullname": "data_algebra.data_ops.SelectColumnsNode.replace_leaves", "modulename": "data_algebra.data_ops", "qualname": "SelectColumnsNode.replace_leaves", "kind": "function", "doc": "<p>Replace leaves of DAG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>:  operators to apply to\n:param replacement_map, table/sqlkeys mapped to replacement Operator platforms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new operator DAG</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">replacement_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.SelectColumnsNode.columns_used_from_sources", "modulename": "data_algebra.data_ops", "qualname": "SelectColumnsNode.columns_used_from_sources", "kind": "function", "doc": "<p>Get columns used from sources. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>using</strong>:  optional column restriction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of order sets (list parallel to sources).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">using</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.SelectColumnsNode.to_python_src_", "modulename": "data_algebra.data_ops", "qualname": "SelectColumnsNode.to_python_src_", "kind": "function", "doc": "<p>Return text representing operations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>indent</strong>:  additional indent to apply in formatting.</li>\n<li><strong>strict</strong>:  if False allow eliding of columns names and other long structures.</li>\n<li><strong>print_sources</strong>:  logical, print children.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">print_sources</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.SelectColumnsNode.to_near_sql_implementation_", "modulename": "data_algebra.data_ops", "qualname": "SelectColumnsNode.to_near_sql_implementation_", "kind": "function", "doc": "<p>Convert operator dag into NearSQL type for translation to SQL string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  database model</li>\n<li><strong>using</strong>:  optional column restriction set</li>\n<li><strong>temp_id_source</strong>:  source of temporary ids</li>\n<li><strong>sql_format_options</strong>:  options for sql formatting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data_algebra.near_sql.NearSQL</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.DropColumnsNode", "modulename": "data_algebra.data_ops", "qualname": "DropColumnsNode", "kind": "class", "doc": "<p>Class representation of .drop_columns() method/step.</p>\n", "bases": "ViewRepresentation"}, {"fullname": "data_algebra.data_ops.DropColumnsNode.__init__", "modulename": "data_algebra.data_ops", "qualname": "DropColumnsNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">column_deletions</span></span>)</span>"}, {"fullname": "data_algebra.data_ops.DropColumnsNode.replace_leaves", "modulename": "data_algebra.data_ops", "qualname": "DropColumnsNode.replace_leaves", "kind": "function", "doc": "<p>Replace leaves of DAG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>:  operators to apply to\n:param replacement_map, table/sqlkeys mapped to replacement Operator platforms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new operator DAG</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">replacement_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.DropColumnsNode.columns_used_from_sources", "modulename": "data_algebra.data_ops", "qualname": "DropColumnsNode.columns_used_from_sources", "kind": "function", "doc": "<p>Get columns used from sources. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>using</strong>:  optional column restriction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of order sets (list parallel to sources).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">using</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.DropColumnsNode.to_python_src_", "modulename": "data_algebra.data_ops", "qualname": "DropColumnsNode.to_python_src_", "kind": "function", "doc": "<p>Return text representing operations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>indent</strong>:  additional indent to apply in formatting.</li>\n<li><strong>strict</strong>:  if False allow eliding of columns names and other long structures.</li>\n<li><strong>print_sources</strong>:  logical, print children.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">print_sources</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.DropColumnsNode.to_near_sql_implementation_", "modulename": "data_algebra.data_ops", "qualname": "DropColumnsNode.to_near_sql_implementation_", "kind": "function", "doc": "<p>Convert operator dag into NearSQL type for translation to SQL string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  database model</li>\n<li><strong>using</strong>:  optional column restriction set</li>\n<li><strong>temp_id_source</strong>:  source of temporary ids</li>\n<li><strong>sql_format_options</strong>:  options for sql formatting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data_algebra.near_sql.NearSQL</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.OrderRowsNode", "modulename": "data_algebra.data_ops", "qualname": "OrderRowsNode", "kind": "class", "doc": "<p>Class representation of .order_rows() method/step.</p>\n", "bases": "ViewRepresentation"}, {"fullname": "data_algebra.data_ops.OrderRowsNode.__init__", "modulename": "data_algebra.data_ops", "qualname": "OrderRowsNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">columns</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "data_algebra.data_ops.OrderRowsNode.replace_leaves", "modulename": "data_algebra.data_ops", "qualname": "OrderRowsNode.replace_leaves", "kind": "function", "doc": "<p>Replace leaves of DAG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>:  operators to apply to\n:param replacement_map, table/sqlkeys mapped to replacement Operator platforms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new operator DAG</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">replacement_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.OrderRowsNode.columns_used_from_sources", "modulename": "data_algebra.data_ops", "qualname": "OrderRowsNode.columns_used_from_sources", "kind": "function", "doc": "<p>Get columns used from sources. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>using</strong>:  optional column restriction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of order sets (list parallel to sources).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">using</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.OrderRowsNode.to_python_src_", "modulename": "data_algebra.data_ops", "qualname": "OrderRowsNode.to_python_src_", "kind": "function", "doc": "<p>Return text representing operations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>indent</strong>:  additional indent to apply in formatting.</li>\n<li><strong>strict</strong>:  if False allow eliding of columns names and other long structures.</li>\n<li><strong>print_sources</strong>:  logical, print children.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">print_sources</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.OrderRowsNode.to_near_sql_implementation_", "modulename": "data_algebra.data_ops", "qualname": "OrderRowsNode.to_near_sql_implementation_", "kind": "function", "doc": "<p>Convert operator dag into NearSQL type for translation to SQL string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  database model</li>\n<li><strong>using</strong>:  optional column restriction set</li>\n<li><strong>temp_id_source</strong>:  source of temporary ids</li>\n<li><strong>sql_format_options</strong>:  options for sql formatting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data_algebra.near_sql.NearSQL</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.OrderRowsNode.is_trivial_when_intermediate_", "modulename": "data_algebra.data_ops", "qualname": "OrderRowsNode.is_trivial_when_intermediate_", "kind": "function", "doc": "<p>Return if True if operator can be eliminated from interior of chain.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.MapColumnsNode", "modulename": "data_algebra.data_ops", "qualname": "MapColumnsNode", "kind": "class", "doc": "<p>Class representation of .map_columns() method/step.</p>\n", "bases": "ViewRepresentation"}, {"fullname": "data_algebra.data_ops.MapColumnsNode.__init__", "modulename": "data_algebra.data_ops", "qualname": "MapColumnsNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">column_remapping</span></span>)</span>"}, {"fullname": "data_algebra.data_ops.MapColumnsNode.replace_leaves", "modulename": "data_algebra.data_ops", "qualname": "MapColumnsNode.replace_leaves", "kind": "function", "doc": "<p>Replace leaves of DAG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>:  operators to apply to\n:param replacement_map, table/sqlkeys mapped to replacement Operator platforms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new operator DAG</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">replacement_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.MapColumnsNode.columns_used_from_sources", "modulename": "data_algebra.data_ops", "qualname": "MapColumnsNode.columns_used_from_sources", "kind": "function", "doc": "<p>Get columns used from sources. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>using</strong>:  optional column restriction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of order sets (list parallel to sources).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">using</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.MapColumnsNode.to_python_src_", "modulename": "data_algebra.data_ops", "qualname": "MapColumnsNode.to_python_src_", "kind": "function", "doc": "<p>Return text representing operations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>indent</strong>:  additional indent to apply in formatting.</li>\n<li><strong>strict</strong>:  if False allow eliding of columns names and other long structures.</li>\n<li><strong>print_sources</strong>:  logical, print children.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">print_sources</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.MapColumnsNode.to_near_sql_implementation_", "modulename": "data_algebra.data_ops", "qualname": "MapColumnsNode.to_near_sql_implementation_", "kind": "function", "doc": "<p>Convert operator dag into NearSQL type for translation to SQL string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  database model</li>\n<li><strong>using</strong>:  optional column restriction set</li>\n<li><strong>temp_id_source</strong>:  source of temporary ids</li>\n<li><strong>sql_format_options</strong>:  options for sql formatting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data_algebra.near_sql.NearSQL</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.RenameColumnsNode", "modulename": "data_algebra.data_ops", "qualname": "RenameColumnsNode", "kind": "class", "doc": "<p>Class representation of .rename_columns() method/step.</p>\n", "bases": "ViewRepresentation"}, {"fullname": "data_algebra.data_ops.RenameColumnsNode.__init__", "modulename": "data_algebra.data_ops", "qualname": "RenameColumnsNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">column_remapping</span></span>)</span>"}, {"fullname": "data_algebra.data_ops.RenameColumnsNode.replace_leaves", "modulename": "data_algebra.data_ops", "qualname": "RenameColumnsNode.replace_leaves", "kind": "function", "doc": "<p>Replace leaves of DAG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>:  operators to apply to\n:param replacement_map, table/sqlkeys mapped to replacement Operator platforms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new operator DAG</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">replacement_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.RenameColumnsNode.columns_used_from_sources", "modulename": "data_algebra.data_ops", "qualname": "RenameColumnsNode.columns_used_from_sources", "kind": "function", "doc": "<p>Get columns used from sources. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>using</strong>:  optional column restriction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of order sets (list parallel to sources).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">using</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.RenameColumnsNode.to_python_src_", "modulename": "data_algebra.data_ops", "qualname": "RenameColumnsNode.to_python_src_", "kind": "function", "doc": "<p>Return text representing operations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>indent</strong>:  additional indent to apply in formatting.</li>\n<li><strong>strict</strong>:  if False allow eliding of columns names and other long structures.</li>\n<li><strong>print_sources</strong>:  logical, print children.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">print_sources</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.RenameColumnsNode.to_near_sql_implementation_", "modulename": "data_algebra.data_ops", "qualname": "RenameColumnsNode.to_near_sql_implementation_", "kind": "function", "doc": "<p>Convert operator dag into NearSQL type for translation to SQL string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  database model</li>\n<li><strong>using</strong>:  optional column restriction set</li>\n<li><strong>temp_id_source</strong>:  source of temporary ids</li>\n<li><strong>sql_format_options</strong>:  options for sql formatting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data_algebra.near_sql.NearSQL</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.NaturalJoinNode", "modulename": "data_algebra.data_ops", "qualname": "NaturalJoinNode", "kind": "class", "doc": "<p>Class representation of .natural_join() method/step.</p>\n", "bases": "ViewRepresentation"}, {"fullname": "data_algebra.data_ops.NaturalJoinNode.__init__", "modulename": "data_algebra.data_ops", "qualname": "NaturalJoinNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a</span>,</span><span class=\"param\">\t<span class=\"n\">b</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">on_a</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">on_b</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">jointype</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">check_all_common_keys_in_equi_spec</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "data_algebra.data_ops.NaturalJoinNode.replace_leaves", "modulename": "data_algebra.data_ops", "qualname": "NaturalJoinNode.replace_leaves", "kind": "function", "doc": "<p>Replace leaves of DAG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>:  operators to apply to\n:param replacement_map, table/sqlkeys mapped to replacement Operator platforms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new operator DAG</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">replacement_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.NaturalJoinNode.columns_used_from_sources", "modulename": "data_algebra.data_ops", "qualname": "NaturalJoinNode.columns_used_from_sources", "kind": "function", "doc": "<p>Get columns used from sources. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>using</strong>:  optional column restriction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of order sets (list parallel to sources).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">using</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.NaturalJoinNode.to_python_src_", "modulename": "data_algebra.data_ops", "qualname": "NaturalJoinNode.to_python_src_", "kind": "function", "doc": "<p>Return text representing operations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>indent</strong>:  additional indent to apply in formatting.</li>\n<li><strong>strict</strong>:  if False allow eliding of columns names and other long structures.</li>\n<li><strong>print_sources</strong>:  logical, print children.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">print_sources</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.NaturalJoinNode.to_near_sql_implementation_", "modulename": "data_algebra.data_ops", "qualname": "NaturalJoinNode.to_near_sql_implementation_", "kind": "function", "doc": "<p>Convert operator dag into NearSQL type for translation to SQL string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  database model</li>\n<li><strong>using</strong>:  optional column restriction set</li>\n<li><strong>temp_id_source</strong>:  source of temporary ids</li>\n<li><strong>sql_format_options</strong>:  options for sql formatting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data_algebra.near_sql.NearSQL</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ConcatRowsNode", "modulename": "data_algebra.data_ops", "qualname": "ConcatRowsNode", "kind": "class", "doc": "<p>Class representation of .concat_rows() method/step.</p>\n", "bases": "ViewRepresentation"}, {"fullname": "data_algebra.data_ops.ConcatRowsNode.__init__", "modulename": "data_algebra.data_ops", "qualname": "ConcatRowsNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">id_column</span><span class=\"o\">=</span><span class=\"s1\">&#39;table_name&#39;</span>, </span><span class=\"param\"><span class=\"n\">a_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;a&#39;</span>, </span><span class=\"param\"><span class=\"n\">b_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;b&#39;</span></span>)</span>"}, {"fullname": "data_algebra.data_ops.ConcatRowsNode.replace_leaves", "modulename": "data_algebra.data_ops", "qualname": "ConcatRowsNode.replace_leaves", "kind": "function", "doc": "<p>Replace leaves of DAG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>:  operators to apply to\n:param replacement_map, table/sqlkeys mapped to replacement Operator platforms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new operator DAG</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">replacement_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ConcatRowsNode.columns_used_from_sources", "modulename": "data_algebra.data_ops", "qualname": "ConcatRowsNode.columns_used_from_sources", "kind": "function", "doc": "<p>Get columns used from sources. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>using</strong>:  optional column restriction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of order sets (list parallel to sources).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">using</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ConcatRowsNode.to_python_src_", "modulename": "data_algebra.data_ops", "qualname": "ConcatRowsNode.to_python_src_", "kind": "function", "doc": "<p>Return text representing operations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>indent</strong>:  additional indent to apply in formatting.</li>\n<li><strong>strict</strong>:  if False allow eliding of columns names and other long structures.</li>\n<li><strong>print_sources</strong>:  logical, print children.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">print_sources</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ConcatRowsNode.to_near_sql_implementation_", "modulename": "data_algebra.data_ops", "qualname": "ConcatRowsNode.to_near_sql_implementation_", "kind": "function", "doc": "<p>Convert operator dag into NearSQL type for translation to SQL string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  database model</li>\n<li><strong>using</strong>:  optional column restriction set</li>\n<li><strong>temp_id_source</strong>:  source of temporary ids</li>\n<li><strong>sql_format_options</strong>:  options for sql formatting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data_algebra.near_sql.NearSQL</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ConvertRecordsNode", "modulename": "data_algebra.data_ops", "qualname": "ConvertRecordsNode", "kind": "class", "doc": "<p>Class representation of .convert_records() method/step.</p>\n", "bases": "ViewRepresentation"}, {"fullname": "data_algebra.data_ops.ConvertRecordsNode.__init__", "modulename": "data_algebra.data_ops", "qualname": "ConvertRecordsNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">record_map</span></span>)</span>"}, {"fullname": "data_algebra.data_ops.ConvertRecordsNode.replace_leaves", "modulename": "data_algebra.data_ops", "qualname": "ConvertRecordsNode.replace_leaves", "kind": "function", "doc": "<p>Replace leaves of DAG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>:  operators to apply to\n:param replacement_map, table/sqlkeys mapped to replacement Operator platforms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new operator DAG</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">replacement_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ConvertRecordsNode.columns_used_from_sources", "modulename": "data_algebra.data_ops", "qualname": "ConvertRecordsNode.columns_used_from_sources", "kind": "function", "doc": "<p>Get columns used from sources. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>using</strong>:  optional column restriction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of order sets (list parallel to sources).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">using</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ConvertRecordsNode.to_python_src_", "modulename": "data_algebra.data_ops", "qualname": "ConvertRecordsNode.to_python_src_", "kind": "function", "doc": "<p>Return text representing operations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>indent</strong>:  additional indent to apply in formatting.</li>\n<li><strong>strict</strong>:  if False allow eliding of columns names and other long structures.</li>\n<li><strong>print_sources</strong>:  logical, print children.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">print_sources</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ConvertRecordsNode.to_near_sql_implementation_", "modulename": "data_algebra.data_ops", "qualname": "ConvertRecordsNode.to_near_sql_implementation_", "kind": "function", "doc": "<p>Convert operator dag into NearSQL type for translation to SQL string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  database model</li>\n<li><strong>using</strong>:  optional column restriction set</li>\n<li><strong>temp_id_source</strong>:  source of temporary ids</li>\n<li><strong>sql_format_options</strong>:  options for sql formatting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data_algebra.near_sql.NearSQL</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.SQLNode", "modulename": "data_algebra.data_ops", "qualname": "SQLNode", "kind": "class", "doc": "<p>Class representation of user SQL step in pipeline. Can be used to start a pipeline instead of a TableDescription.</p>\n", "bases": "ViewRepresentation"}, {"fullname": "data_algebra.data_ops.SQLNode.__init__", "modulename": "data_algebra.data_ops", "qualname": "SQLNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">column_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">view_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "data_algebra.data_ops.SQLNode.replace_leaves", "modulename": "data_algebra.data_ops", "qualname": "SQLNode.replace_leaves", "kind": "function", "doc": "<p>Replace leaves of DAG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>:  operators to apply to\n:param replacement_map, table/sqlkeys mapped to replacement Operator platforms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new operator DAG</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">replacement_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.SQLNode.get_tables", "modulename": "data_algebra.data_ops", "qualname": "SQLNode.get_tables", "kind": "function", "doc": "<p>Get a dictionary of all tables used in an operator DAG,\nraise an exception if the values are not consistent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.SQLNode.columns_used_from_sources", "modulename": "data_algebra.data_ops", "qualname": "SQLNode.columns_used_from_sources", "kind": "function", "doc": "<p>Get columns used from sources. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>using</strong>:  optional column restriction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of order sets (list parallel to sources).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">using</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.SQLNode.to_python_src_", "modulename": "data_algebra.data_ops", "qualname": "SQLNode.to_python_src_", "kind": "function", "doc": "<p>Return text representing operations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>indent</strong>:  additional indent to apply in formatting.</li>\n<li><strong>strict</strong>:  if False allow eliding of columns names and other long structures.</li>\n<li><strong>print_sources</strong>:  logical, print children.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">print_sources</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.SQLNode.to_near_sql_implementation_", "modulename": "data_algebra.data_ops", "qualname": "SQLNode.to_near_sql_implementation_", "kind": "function", "doc": "<p>Convert operator dag into NearSQL type for translation to SQL string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  database model</li>\n<li><strong>using</strong>:  optional column restriction set</li>\n<li><strong>temp_id_source</strong>:  source of temporary ids</li>\n<li><strong>sql_format_options</strong>:  options for sql formatting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data_algebra.near_sql.NearSQL</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops.ex", "modulename": "data_algebra.data_ops", "qualname": "ex", "kind": "function", "doc": "<p>Evaluate operators with respect to Pandas data frames already stored in the operator chain.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d</strong>:  data algebra pipeline or OpC container to evaluate.</li>\n<li><strong>data_model</strong>:  adaptor to data dialect (Pandas for now)</li>\n<li><strong>allow_limited_tables</strong>:  logical, if True allow execution on non-complete tables</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">allow_limited_tables</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types", "modulename": "data_algebra.data_ops_types", "kind": "module", "doc": "<p>Type defs for data operations.</p>\n"}, {"fullname": "data_algebra.data_ops_types.MethodUse", "modulename": "data_algebra.data_ops_types", "qualname": "MethodUse", "kind": "class", "doc": "<p>Carry description of a method use</p>\n", "bases": "typing.NamedTuple"}, {"fullname": "data_algebra.data_ops_types.MethodUse.__init__", "modulename": "data_algebra.data_ops_types", "qualname": "MethodUse.__init__", "kind": "function", "doc": "<p>Create new instance of MethodUse(op_name, is_project, is_windowed, is_ordered)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">op_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">is_project</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">is_windowed</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">is_ordered</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "data_algebra.data_ops_types.MethodUse.op_name", "modulename": "data_algebra.data_ops_types", "qualname": "MethodUse.op_name", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": str"}, {"fullname": "data_algebra.data_ops_types.MethodUse.is_project", "modulename": "data_algebra.data_ops_types", "qualname": "MethodUse.is_project", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": bool"}, {"fullname": "data_algebra.data_ops_types.MethodUse.is_windowed", "modulename": "data_algebra.data_ops_types", "qualname": "MethodUse.is_windowed", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": bool"}, {"fullname": "data_algebra.data_ops_types.MethodUse.is_ordered", "modulename": "data_algebra.data_ops_types", "qualname": "MethodUse.is_ordered", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": bool"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform", "kind": "class", "doc": "<p>Abstract class representing ability to apply data_algebra operations.</p>\n", "bases": "abc.ABC"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.eval", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.eval", "kind": "function", "doc": "<p>Evaluate operators with respect to Pandas data frames.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_map</strong>:  map from table names to data frames or data sources</li>\n<li><strong>data_model</strong>:  adaptor to data dialect (Pandas for now)</li>\n<li><strong>strict</strong>:  if True, throw on unexpected columns</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">strict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.transform", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.transform", "kind": "function", "doc": "<p>apply self to data frame X, may or may not commute with composition</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  input data frame</li>\n<li><strong>data_model</strong>:  implementation to use</li>\n<li><strong>strict</strong>:  if True, throw on unexpected columns</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data frame</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.replace_leaves", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.replace_leaves", "kind": "function", "doc": "<p>Replace leaves of DAG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>:  operators to apply to\n:param replacement_map, table/sqlkeys mapped to replacement Operator platforms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new operator DAG</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">replacement_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.act_on", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.act_on", "kind": "function", "doc": "<p>apply self to X, must associate with composition\nOperator is strict about column names.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  input data frame\n:param data_model implementation to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.use", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.use", "kind": "function", "doc": "<p>Apply f as if it was a method on this chain.\nDefined as return f(self, <em>args, *</em>kwargs).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>user_function</strong>:  function to apply</li>\n<li><strong>args</strong>:  additional positional arguments</li>\n<li><strong>kwargs</strong>:  additional keyword arguments</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">user_function</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.ex", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.ex", "kind": "function", "doc": "<p>Evaluate operators with respect to Pandas data frames already stored in the operator chain.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_model</strong>:  adaptor to data dialect (Pandas for now)</li>\n<li><strong>allow_limited_tables</strong>:  logical, if True allow execution on non-complete tables</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">allow_limited_tables</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.get_tables", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.get_tables", "kind": "function", "doc": "<p>Get a dictionary of all tables used in an operator DAG,\nraise an exception if the values are not consistent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.columns_produced", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.columns_produced", "kind": "function", "doc": "<p>Return list of columns produced by pipeline.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.methods_used", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.methods_used", "kind": "function", "doc": "<p>Return set of methods used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops_types</span><span class=\"o\">.</span><span class=\"n\">MethodUse</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.to_near_sql_implementation_", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.to_near_sql_implementation_", "kind": "function", "doc": "<p>Convert to NearSQL as a step in converting to a SQL string. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  database model</li>\n<li><strong>using</strong>:  optional column restriction</li>\n<li><strong>temp_id_source</strong>:  temporary id source.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">db_model</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">using</span>, </span><span class=\"param\"><span class=\"n\">temp_id_source</span>, </span><span class=\"param\"><span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.extend_parsed_", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.extend_parsed_", "kind": "function", "doc": "<p>Add new derived columns, can replace existing columns for parsed operations. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parsed_ops</strong>:  dictionary of calculations to perform.</li>\n<li><strong>partition_by</strong>:  optional window partition specification.</li>\n<li><strong>order_by</strong>:  optional window ordering specification.</li>\n<li><strong>reverse</strong>:  optional order reversal specification.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parsed_ops</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">partition_by</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.project_parsed_", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.project_parsed_", "kind": "function", "doc": "<p>Compute projection, or grouped calculation for parsed ops. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parsed_ops</strong>:  dictionary of calculations to perform, can be empty.</li>\n<li><strong>group_by</strong>:  optional group key(s) specification.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parsed_ops</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">group_by</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.select_rows_parsed_", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.select_rows_parsed_", "kind": "function", "doc": "<p>Select rows matching parsed expr criteria. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parsed_expr</strong>:  logical expression specifying desired rows.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parsed_expr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.extend", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.extend", "kind": "function", "doc": "<p>Add new derived columns, can replace existing columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ops</strong>:  dictionary of calculations to perform.</li>\n<li><strong>partition_by</strong>:  optional window partition specification.</li>\n<li><strong>order_by</strong>:  optional window ordering specification.</li>\n<li><strong>reverse</strong>:  optional order reversal specification.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ops</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">partition_by</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.project", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.project", "kind": "function", "doc": "<p>Compute projection, or grouped calculation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ops</strong>:  dictionary of calculations to perform, can be empty.</li>\n<li><strong>group_by</strong>:  optional group key(s) specification.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ops</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">group_by</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.natural_join", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.natural_join", "kind": "function", "doc": "<p>Join self (left) results with b (right).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>b</strong>:  second or right table to join to.</li>\n<li><strong>on</strong>:  list of join column names to enforce equality on.</li>\n<li><strong>jointype</strong>:  name of join type.</li>\n<li><strong>check_all_common_keys_in_equi_spec</strong>:  if True, raise if any non-equality key columns are common to tables.</li>\n<li><strong>by</strong>:  synonym for on, only set at most one of on or by (deprecated).</li>\n<li><strong>check_all_common_keys_in_by</strong>:  synonym for check_all_common_keys_in_equi_spec (deprecated).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">b</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">on</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">jointype</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">check_all_common_keys_in_equi_spec</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">by</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">check_all_common_keys_in_by</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.concat_rows", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.concat_rows", "kind": "function", "doc": "<p>Union or concatenate rows of self with rows of b.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>b</strong>:  table with rows to add.</li>\n<li><strong>id_column</strong>:  optional name for new source identification column.</li>\n<li><strong>a_name</strong>:  source annotation to use for self/a.</li>\n<li><strong>b_name</strong>:  source annotation to use for b.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">id_column</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_name&#39;</span>, </span><span class=\"param\"><span class=\"n\">a_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;a&#39;</span>, </span><span class=\"param\"><span class=\"n\">b_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;b&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.select_rows", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.select_rows", "kind": "function", "doc": "<p>Select rows matching expr criteria.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>expr</strong>:  logical expression specifying desired rows.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">expr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.drop_columns", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.drop_columns", "kind": "function", "doc": "<p>Remove columns from result.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>column_deletions</strong>:  list of columns to remove.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column_deletions</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.select_columns", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.select_columns", "kind": "function", "doc": "<p>Narrow to columns in result.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>columns</strong>:  list of columns to keep.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">columns</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.map_columns", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.map_columns", "kind": "function", "doc": "<p>Map column names or rename.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>column_remapping</strong>:  dictionary mapping old column sources to new column names (same\ndirection as Pandas rename).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column_remapping</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.rename_columns", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.rename_columns", "kind": "function", "doc": "<p>Rename columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>column_remapping</strong>:  dictionary mapping new column names to old column sources (same\ndirection as extend).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column_remapping</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.order_rows", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.order_rows", "kind": "function", "doc": "<p>Order rows by column set.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>columns</strong>:  columns to order by.</li>\n<li><strong>reverse</strong>:  optional columns to reverse order.</li>\n<li><strong>limit</strong>:  optional row limit to impose on result.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">columns</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.convert_records", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.convert_records", "kind": "function", "doc": "<p>Apply a record mapping taking blocks_in to blocks_out structures.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>record_map</strong>:  data_algebra.cdata.RecordMap transform specification</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_map</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">cdata</span><span class=\"o\">.</span><span class=\"n\">RecordMap</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_types.OperatorPlatform.map_records", "modulename": "data_algebra.data_ops_types", "qualname": "OperatorPlatform.map_records", "kind": "function", "doc": "<p>Apply a record mapping taking blocks_in to blocks_out structures.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>blocks_in</strong>:  Optional incoming record specification</li>\n<li><strong>blocks_out</strong>:  Optional incoming record specification</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">blocks_in</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">cdata</span><span class=\"o\">.</span><span class=\"n\">RecordSpecification</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">blocks_out</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">cdata</span><span class=\"o\">.</span><span class=\"n\">RecordSpecification</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_ops_utils", "modulename": "data_algebra.data_ops_utils", "kind": "module", "doc": "<p>Utility to merge extend operations, when appropriate.</p>\n"}, {"fullname": "data_algebra.data_ops_utils.try_to_merge_ops", "modulename": "data_algebra.data_ops_utils", "qualname": "try_to_merge_ops", "kind": "function", "doc": "<p>Try to merge two extends into one. Return merged op, or None if not possible.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ops1</span>, </span><span class=\"param\"><span class=\"n\">ops2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_space", "modulename": "data_algebra.data_space", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "data_algebra.data_space.DataSpace", "modulename": "data_algebra.data_space", "qualname": "DataSpace", "kind": "class", "doc": "<p>Class modeling a space of data keyed by strings, with specified semantics.</p>\n", "bases": "abc.ABC"}, {"fullname": "data_algebra.data_space.DataSpace.insert", "modulename": "data_algebra.data_space", "qualname": "DataSpace.insert", "kind": "function", "doc": "<p>Insert value into data space for key.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong>:  key</li>\n<li><strong>value</strong>:  data</li>\n<li><strong>allow_overwrite</strong>:  if True, allow table replacement</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table description</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">value</span>,</span><span class=\"param\">\t<span class=\"n\">allow_overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">TableDescription</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_space.DataSpace.remove", "modulename": "data_algebra.data_space", "qualname": "DataSpace.remove", "kind": "function", "doc": "<p>Remove value from data space.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong>:  key to remove</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_space.DataSpace.keys", "modulename": "data_algebra.data_space", "qualname": "DataSpace.keys", "kind": "function", "doc": "<p>Return keys</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_space.DataSpace.retrieve", "modulename": "data_algebra.data_space", "qualname": "DataSpace.retrieve", "kind": "function", "doc": "<p>Retrieve a table value from the DataSpace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong>:  key</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_space.DataSpace.execute", "modulename": "data_algebra.data_space", "qualname": "DataSpace.execute", "kind": "function", "doc": "<p>Execute ops in data space, saving result as a side effect and returning a reference.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ops</strong>:  data algebra operator dag.</li>\n<li><strong>key</strong>:  name for result</li>\n<li><strong>allow_overwrite</strong>:  if True allow table replacement</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data key</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ops</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">allow_overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">TableDescription</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_space.DataSpace.describe", "modulename": "data_algebra.data_space", "qualname": "DataSpace.describe", "kind": "function", "doc": "<p>Retrieve a table description from the DataSpace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong>:  key</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data description</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">TableDescription</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.data_space.DataSpace.close", "modulename": "data_algebra.data_space", "qualname": "DataSpace.close", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model", "modulename": "data_algebra.db_model", "kind": "module", "doc": "<p>Base class for SQL adapters for data algebra.</p>\n"}, {"fullname": "data_algebra.db_model.DBModel", "modulename": "data_algebra.db_model", "qualname": "DBModel", "kind": "class", "doc": "<p>A model of how SQL should be generated for a given database.</p>\n"}, {"fullname": "data_algebra.db_model.DBModel.__init__", "modulename": "data_algebra.db_model", "qualname": "DBModel.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">identifier_quote</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&quot;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">string_quote</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&#39;&quot;</span>,</span><span class=\"param\">\t<span class=\"n\">sql_formatters</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">op_replacements</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">on_start</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">on_end</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">on_joiner</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;AND&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">drop_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;DROP TABLE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">string_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;VARCHAR&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">float_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FLOAT64&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">supports_with</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">supports_cte_elim</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">allow_extend_merges</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">default_SQL_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">union_all_term_start</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;(&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">union_all_term_end</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;)&#39;</span></span>)</span>"}, {"fullname": "data_algebra.db_model.DBModel.db_handle", "modulename": "data_algebra.db_model", "qualname": "DBModel.db_handle", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong>:  database connection</li>\n<li><strong>db_engine</strong>:  optional sqlalchemy style engine (for closing)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">db_engine</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.prepare_connection", "modulename": "data_algebra.db_model", "qualname": "DBModel.prepare_connection", "kind": "function", "doc": "<p>Do any augmentation or preparation of a database connection. Example: adding stored procedures.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.execute", "modulename": "data_algebra.db_model", "qualname": "DBModel.execute", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong>:  database connection</li>\n<li><strong>q</strong>:  sql query</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.read_query", "modulename": "data_algebra.db_model", "qualname": "DBModel.read_query", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong>:  database connection</li>\n<li><strong>q</strong>:  sql query</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>query results as table</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.table_exists", "modulename": "data_algebra.db_model", "qualname": "DBModel.table_exists", "kind": "function", "doc": "<p>Return true if table exists.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.drop_table", "modulename": "data_algebra.db_model", "qualname": "DBModel.drop_table", "kind": "function", "doc": "<p>Remove a table.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">check</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.insert_table", "modulename": "data_algebra.db_model", "qualname": "DBModel.insert_table", "kind": "function", "doc": "<p>Insert a table.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong>:  a database connection</li>\n<li><strong>d</strong>:  a Pandas table</li>\n<li><strong>table_name</strong>:  name to give write to</li>\n<li><strong>qualifiers</strong>:  schema and such\n:param allow_overwrite logical, if True drop previous table</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">conn</span>,</span><span class=\"param\">\t<span class=\"n\">d</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">qualifiers</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">allow_overwrite</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.read_table", "modulename": "data_algebra.db_model", "qualname": "DBModel.read_table", "kind": "function", "doc": "<p>Return table contents as a Pandas data frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">qualifiers</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.read", "modulename": "data_algebra.db_model", "qualname": "DBModel.read", "kind": "function", "doc": "<p>Return table as a pandas data frame for table description.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">table</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.quote_identifier", "modulename": "data_algebra.db_model", "qualname": "DBModel.quote_identifier", "kind": "function", "doc": "<p>Quote identifier.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.quote_table_name", "modulename": "data_algebra.db_model", "qualname": "DBModel.quote_table_name", "kind": "function", "doc": "<p>Quote a table name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_description</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.quote_string", "modulename": "data_algebra.db_model", "qualname": "DBModel.quote_string", "kind": "function", "doc": "<p>Quote a string value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.value_to_sql", "modulename": "data_algebra.db_model", "qualname": "DBModel.value_to_sql", "kind": "function", "doc": "<p>Convert a value to valid SQL.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.table_values_to_sql_str_list", "modulename": "data_algebra.db_model", "qualname": "DBModel.table_values_to_sql_str_list", "kind": "function", "doc": "<p>Convert a table of values to a SQL. Only for small tables.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">result_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;table_values&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.expr_to_sql", "modulename": "data_algebra.db_model", "qualname": "DBModel.expr_to_sql", "kind": "function", "doc": "<p>Convert an expression to SQL.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">expression</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">want_inline_parens</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.table_def_to_near_sql", "modulename": "data_algebra.db_model", "qualname": "DBModel.table_def_to_near_sql", "kind": "function", "doc": "<p>Convert a table description to NearSQL.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_def</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.extend_to_near_sql", "modulename": "data_algebra.db_model", "qualname": "DBModel.extend_to_near_sql", "kind": "function", "doc": "<p>Convert an extend step into NearSQL.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">extend_node</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.project_to_near_sql", "modulename": "data_algebra.db_model", "qualname": "DBModel.project_to_near_sql", "kind": "function", "doc": "<p>Convert a project step to NearSQL</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">project_node</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.select_rows_to_near_sql", "modulename": "data_algebra.db_model", "qualname": "DBModel.select_rows_to_near_sql", "kind": "function", "doc": "<p>Convert select rows into NearSQL</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">select_rows_node</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.select_columns_to_near_sql", "modulename": "data_algebra.db_model", "qualname": "DBModel.select_columns_to_near_sql", "kind": "function", "doc": "<p>Convert select columns to NearSQL.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">select_columns_node</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.drop_columns_to_near_sql", "modulename": "data_algebra.db_model", "qualname": "DBModel.drop_columns_to_near_sql", "kind": "function", "doc": "<p>Convert drop columns to NearSQL</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">drop_columns_node</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.order_to_near_sql", "modulename": "data_algebra.db_model", "qualname": "DBModel.order_to_near_sql", "kind": "function", "doc": "<p>Convert order rows to NearSQL.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">order_node</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.map_columns_to_near_sql", "modulename": "data_algebra.db_model", "qualname": "DBModel.map_columns_to_near_sql", "kind": "function", "doc": "<p>Convert map columns columns to NearSQL.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">map_columns_node</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.rename_to_near_sql", "modulename": "data_algebra.db_model", "qualname": "DBModel.rename_to_near_sql", "kind": "function", "doc": "<p>Convert rename columns to NearSQL.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rename_node</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.natural_join_to_near_sql", "modulename": "data_algebra.db_model", "qualname": "DBModel.natural_join_to_near_sql", "kind": "function", "doc": "<p>Convert natural join into NearSQL.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">join_node</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">left_is_first</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.concat_rows_to_near_sql", "modulename": "data_algebra.db_model", "qualname": "DBModel.concat_rows_to_near_sql", "kind": "function", "doc": "<p>Convert concat rows into NearSQL.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">concat_node</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">temp_id_source</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.non_known_methods", "modulename": "data_algebra.db_model", "qualname": "DBModel.non_known_methods", "kind": "function", "doc": "<p>Return list of used non-recommended methods.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ops</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops_types</span><span class=\"o\">.</span><span class=\"n\">MethodUse</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.non_recommended_methods", "modulename": "data_algebra.db_model", "qualname": "DBModel.non_recommended_methods", "kind": "function", "doc": "<p>Return list of used non-recommended methods.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ops</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops_types</span><span class=\"o\">.</span><span class=\"n\">MethodUse</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.to_sql", "modulename": "data_algebra.db_model", "qualname": "DBModel.to_sql", "kind": "function", "doc": "<p>Convert ViewRepresentation into SQL string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ops</strong>:  ViewRepresentation to convert</li>\n<li><strong>sql_format_options</strong>:  sql formatting options</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>sql string</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ops</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">sql_format_options</span><span class=\"o\">.</span><span class=\"n\">SQLFormatOptions</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.row_recs_to_blocks_query_str_list_pair", "modulename": "data_algebra.db_model", "qualname": "DBModel.row_recs_to_blocks_query_str_list_pair", "kind": "function", "doc": "<p>Convert row recs to blocks transformation into structures to help with SQL conversion.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_spec</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.blocks_to_row_recs_query_str_list_pair", "modulename": "data_algebra.db_model", "qualname": "DBModel.blocks_to_row_recs_query_str_list_pair", "kind": "function", "doc": "<p>Convert blocks to row recs transform into structures to help with SQL translation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_spec</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.enc_term_", "modulename": "data_algebra.db_model", "qualname": "DBModel.enc_term_", "kind": "function", "doc": "<p>encode and name a term for use in a SQL expression</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">k</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">terms</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.nearsqlcte_to_sql_str_list_", "modulename": "data_algebra.db_model", "qualname": "DBModel.nearsqlcte_to_sql_str_list_", "kind": "function", "doc": "<p>Convert SQL common table expression to list of SQL string lines.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">near_sql</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force_sql</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.nearsqltable_to_sql_str_list_", "modulename": "data_algebra.db_model", "qualname": "DBModel.nearsqltable_to_sql_str_list_", "kind": "function", "doc": "<p>Convert SQL table description to list of SQL string lines.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">near_sql</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force_sql</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.nearsqlunary_to_sql_str_list_", "modulename": "data_algebra.db_model", "qualname": "DBModel.nearsqlunary_to_sql_str_list_", "kind": "function", "doc": "<p>Convert SQL unary operation to list of SQL string lines.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">near_sql</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force_sql</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.nearsqlrawq_to_sql_str_list_", "modulename": "data_algebra.db_model", "qualname": "DBModel.nearsqlrawq_to_sql_str_list_", "kind": "function", "doc": "<p>Convert user SQL query to list of SQL string lines.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">near_sql</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">add_select</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBModel.nearsqlbinary_to_sql_str_list_", "modulename": "data_algebra.db_model", "qualname": "DBModel.nearsqlbinary_to_sql_str_list_", "kind": "function", "doc": "<p>Convert SQL binary operation to list of SQL string lines.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">near_sql</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force_sql</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">quoted_query_name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBHandle", "modulename": "data_algebra.db_model", "qualname": "DBHandle", "kind": "class", "doc": "<p>Container for database connection handles.</p>\n"}, {"fullname": "data_algebra.db_model.DBHandle.__init__", "modulename": "data_algebra.db_model", "qualname": "DBHandle.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  associated database model</li>\n<li><strong>conn</strong>:  database connection</li>\n<li><strong>db_engine</strong>:  optional sqlalchemy style engine (for closing)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">db_model</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">db_model</span><span class=\"o\">.</span><span class=\"n\">DBModel</span>, </span><span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">db_engine</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "data_algebra.db_model.DBHandle.read_query", "modulename": "data_algebra.db_model", "qualname": "DBHandle.read_query", "kind": "function", "doc": "<p>Return results of query as a Pandas data frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBHandle.read_table", "modulename": "data_algebra.db_model", "qualname": "DBHandle.read_table", "kind": "function", "doc": "<p>Return table as a Pandas data frame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>table_name</strong>:  table to read</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBHandle.create_table", "modulename": "data_algebra.db_model", "qualname": "DBHandle.create_table", "kind": "function", "doc": "<p>Create table from query.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>table_name</strong>:  table to create</li>\n<li><strong>q</strong>:  query</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table description</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBHandle.describe_table", "modulename": "data_algebra.db_model", "qualname": "DBHandle.describe_table", "kind": "function", "doc": "<p>Return a description of a database table.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">qualifiers</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">row_limit</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">7</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBHandle.execute", "modulename": "data_algebra.db_model", "qualname": "DBHandle.execute", "kind": "function", "doc": "<p>Execute a SQL query or operator dag.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">q</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBHandle.drop_table", "modulename": "data_algebra.db_model", "qualname": "DBHandle.drop_table", "kind": "function", "doc": "<p>Remove a table.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBHandle.insert_table", "modulename": "data_algebra.db_model", "qualname": "DBHandle.insert_table", "kind": "function", "doc": "<p>Insert a table into the database.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">d</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">allow_overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">TableDescription</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBHandle.to_sql", "modulename": "data_algebra.db_model", "qualname": "DBHandle.to_sql", "kind": "function", "doc": "<p>Convert operations into SQL</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ops</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">sql_format_options</span><span class=\"o\">.</span><span class=\"n\">SQLFormatOptions</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBHandle.query_to_csv", "modulename": "data_algebra.db_model", "qualname": "DBHandle.query_to_csv", "kind": "function", "doc": "<p>Execute a query and save the results as a CSV file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">q</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">res_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBHandle.table_values_to_sql_str_list", "modulename": "data_algebra.db_model", "qualname": "DBHandle.table_values_to_sql_str_list", "kind": "function", "doc": "<p>Convert a table of values to a SQL. Only for small tables.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">result_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;table_values&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_model.DBHandle.close", "modulename": "data_algebra.db_model", "qualname": "DBHandle.close", "kind": "function", "doc": "<p>Dispose of engine, or close connection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_space", "modulename": "data_algebra.db_space", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "data_algebra.db_space.DBSpace", "modulename": "data_algebra.db_space", "qualname": "DBSpace", "kind": "class", "doc": "<p>A data space implemented in a database.</p>\n", "bases": "data_algebra.data_space.DataSpace"}, {"fullname": "data_algebra.db_space.DBSpace.__init__", "modulename": "data_algebra.db_space", "qualname": "DBSpace.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db_handle</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">db_model</span><span class=\"o\">.</span><span class=\"n\">DBHandle</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">drop_tables_on_close</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "data_algebra.db_space.DBSpace.model_table", "modulename": "data_algebra.db_space", "qualname": "DBSpace.model_table", "kind": "function", "doc": "<p>Insert existing table record into data space model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong>:  table name and key.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table description</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">eligible_for_auto_drop</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">TableDescription</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_space.DBSpace.insert", "modulename": "data_algebra.db_space", "qualname": "DBSpace.insert", "kind": "function", "doc": "<p>Insert value into data space for key.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong>:  key</li>\n<li><strong>value</strong>:  data</li>\n<li><strong>allow_overwrite</strong>:  if True, allow table replacement</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table description</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">value</span>,</span><span class=\"param\">\t<span class=\"n\">allow_overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">TableDescription</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_space.DBSpace.remove", "modulename": "data_algebra.db_space", "qualname": "DBSpace.remove", "kind": "function", "doc": "<p>Remove value from data space.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong>:  key to remove</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_space.DBSpace.keys", "modulename": "data_algebra.db_space", "qualname": "DBSpace.keys", "kind": "function", "doc": "<p>Return keys</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_space.DBSpace.retrieve", "modulename": "data_algebra.db_space", "qualname": "DBSpace.retrieve", "kind": "function", "doc": "<p>Retrieve a table value from the DataSpace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong>:  key</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_space.DBSpace.execute", "modulename": "data_algebra.db_space", "qualname": "DBSpace.execute", "kind": "function", "doc": "<p>Execute ops in data space, saving result as a side effect and returning a reference.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ops</strong>:  data algebra operator dag.</li>\n<li><strong>key</strong>:  name for result</li>\n<li><strong>allow_overwrite</strong>:  if True allow table replacement</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data key</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ops</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">allow_overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">TableDescription</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_space.DBSpace.describe", "modulename": "data_algebra.db_space", "qualname": "DBSpace.describe", "kind": "function", "doc": "<p>Retrieve a table description from the DataSpace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong>:  key</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data description</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">TableDescription</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.db_space.DBSpace.close", "modulename": "data_algebra.db_space", "qualname": "DBSpace.close", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.eval_cache", "modulename": "data_algebra.eval_cache", "kind": "module", "doc": "<p>Cache for test evaluations</p>\n"}, {"fullname": "data_algebra.eval_cache.hash_data_frame", "modulename": "data_algebra.eval_cache", "qualname": "hash_data_frame", "kind": "function", "doc": "<p>Get a hash code representing a data frame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d</strong>:  data frame</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>hash code as a string</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.eval_cache.EvalKey", "modulename": "data_algebra.eval_cache", "qualname": "EvalKey", "kind": "class", "doc": "<p>Carry description of data transform key</p>\n", "bases": "typing.NamedTuple"}, {"fullname": "data_algebra.eval_cache.EvalKey.__init__", "modulename": "data_algebra.eval_cache", "qualname": "EvalKey.__init__", "kind": "function", "doc": "<p>Create new instance of EvalKey(db_model_name, sql, dat_map_list)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db_model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dat_map_list</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "data_algebra.eval_cache.EvalKey.db_model_name", "modulename": "data_algebra.eval_cache", "qualname": "EvalKey.db_model_name", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": str"}, {"fullname": "data_algebra.eval_cache.EvalKey.sql", "modulename": "data_algebra.eval_cache", "qualname": "EvalKey.sql", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": str"}, {"fullname": "data_algebra.eval_cache.EvalKey.dat_map_list", "modulename": "data_algebra.eval_cache", "qualname": "EvalKey.dat_map_list", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": Tuple[Tuple[str, str], ...]"}, {"fullname": "data_algebra.eval_cache.make_cache_key", "modulename": "data_algebra.eval_cache", "qualname": "make_cache_key", "kind": "function", "doc": "<p>Create an immutable, hashable key.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">db_model</span><span class=\"o\">.</span><span class=\"n\">DBModel</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.eval_cache.ResultCache", "modulename": "data_algebra.eval_cache", "qualname": "ResultCache", "kind": "class", "doc": "<p>Cache for test results. Maps keys to data frames.</p>\n"}, {"fullname": "data_algebra.eval_cache.ResultCache.__init__", "modulename": "data_algebra.eval_cache", "qualname": "ResultCache.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "data_algebra.eval_cache.ResultCache.get", "modulename": "data_algebra.eval_cache", "qualname": "ResultCache.get", "kind": "function", "doc": "<p>get result from cache, raise KeyError if not present</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">db_model</span><span class=\"o\">.</span><span class=\"n\">DBModel</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.eval_cache.ResultCache.store", "modulename": "data_algebra.eval_cache", "qualname": "ResultCache.store", "kind": "function", "doc": "<p>Store result to cache, mark dirty if change.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">db_model</span><span class=\"o\">.</span><span class=\"n\">DBModel</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">res</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_parse", "modulename": "data_algebra.expr_parse", "kind": "module", "doc": "<p>Parse expressions.</p>\n"}, {"fullname": "data_algebra.expr_parse.parse_assignments_in_context", "modulename": "data_algebra.expr_parse", "qualname": "parse_assignments_in_context", "kind": "function", "doc": "<p>Convert all entries of ops map to Term-expressions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ops</strong>:  dictionary from strings to expressions (either Terms or strings)</li>\n<li><strong>view</strong>:  a data_algebra.data_ops.ViewRepresentation</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">ops</span>, </span><span class=\"param\"><span class=\"n\">view</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep", "modulename": "data_algebra.expr_rep", "kind": "module", "doc": "<p>Represent data processing expressions.</p>\n"}, {"fullname": "data_algebra.expr_rep.PythonText", "modulename": "data_algebra.expr_rep", "qualname": "PythonText", "kind": "class", "doc": "<p>Class for holding text representation of Python, with possible additional annotations.\nstr() method returns only the text for interoperability.</p>\n"}, {"fullname": "data_algebra.expr_rep.PythonText.__init__", "modulename": "data_algebra.expr_rep", "qualname": "PythonText.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">is_in_parens</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "data_algebra.expr_rep.PreTerm", "modulename": "data_algebra.expr_rep", "qualname": "PreTerm", "kind": "class", "doc": "<p>abstract base class, without combination ability</p>\n", "bases": "abc.ABC"}, {"fullname": "data_algebra.expr_rep.PreTerm.is_equal", "modulename": "data_algebra.expr_rep", "qualname": "PreTerm.is_equal", "kind": "function", "doc": "<p>Check if this expression code is the same as another expression.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.PreTerm.get_column_names", "modulename": "data_algebra.expr_rep", "qualname": "PreTerm.get_column_names", "kind": "function", "doc": "<p>Add column names to columns_seen</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>columns_seen</strong>:  set of strings</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">columns_seen</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.PreTerm.get_method_names", "modulename": "data_algebra.expr_rep", "qualname": "PreTerm.get_method_names", "kind": "function", "doc": "<p>Add method names to methods_seen</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>methods_seen</strong>:  set of strings</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">methods_seen</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.PreTerm.act_on", "modulename": "data_algebra.expr_rep", "qualname": "PreTerm.act_on", "kind": "function", "doc": "<p>Apply expression to argument.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">arg</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">expr_walker</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">expression_walker</span><span class=\"o\">.</span><span class=\"n\">ExpressionWalker</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.PreTerm.to_python", "modulename": "data_algebra.expr_rep", "qualname": "PreTerm.to_python", "kind": "function", "doc": "<p>Convert parsed expression into a string</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>want_inline_parens</strong>:  bool, if True put parens around complex expressions that don't already have a grouper.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>PythonText</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">want_inline_parens</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">expr_rep</span><span class=\"o\">.</span><span class=\"n\">PythonText</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.PreTerm.to_source", "modulename": "data_algebra.expr_rep", "qualname": "PreTerm.to_source", "kind": "function", "doc": "<p>Convert to source code.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>want_inline_parens</strong>:  bool, if True put parens around complex expressions that don't already have a grouper.</li>\n<li><strong>dialect</strong>:  dialect to emit (not currently used)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>PythonText</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">want_inline_parens</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"o\">=</span><span class=\"s1\">&#39;Python&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">expr_rep</span><span class=\"o\">.</span><span class=\"n\">PythonText</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term", "modulename": "data_algebra.expr_rep", "qualname": "Term", "kind": "class", "doc": "<p>Abstract intermediate class with combination ability</p>\n", "bases": "PreTerm, abc.ABC"}, {"fullname": "data_algebra.expr_rep.Term.float_divide", "modulename": "data_algebra.expr_rep", "qualname": "Term.float_divide", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.sign", "modulename": "data_algebra.expr_rep", "qualname": "Term.sign", "kind": "function", "doc": "<p>Return -1, 0, 1 as sign of item (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.sin", "modulename": "data_algebra.expr_rep", "qualname": "Term.sin", "kind": "function", "doc": "<p>Return trigometric sin() (in radians) of item (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.cos", "modulename": "data_algebra.expr_rep", "qualname": "Term.cos", "kind": "function", "doc": "<p>Return trigometric cos() (in radians) of item (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.arcsin", "modulename": "data_algebra.expr_rep", "qualname": "Term.arcsin", "kind": "function", "doc": "<p>Return trigometric arcsin() (in radians) of item (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.arccos", "modulename": "data_algebra.expr_rep", "qualname": "Term.arccos", "kind": "function", "doc": "<p>Return trigometric arccos() (in radians) of item (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.arctan", "modulename": "data_algebra.expr_rep", "qualname": "Term.arctan", "kind": "function", "doc": "<p>Return trigometric arctan() (in radians) of item (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.arctan2", "modulename": "data_algebra.expr_rep", "qualname": "Term.arctan2", "kind": "function", "doc": "<p>Return trigometric arctan2() (in radians) of item (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.sinh", "modulename": "data_algebra.expr_rep", "qualname": "Term.sinh", "kind": "function", "doc": "<p>Return hyperbolic sinh() of item (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.cosh", "modulename": "data_algebra.expr_rep", "qualname": "Term.cosh", "kind": "function", "doc": "<p>Return hyperbolic cosh() of item (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.tanh", "modulename": "data_algebra.expr_rep", "qualname": "Term.tanh", "kind": "function", "doc": "<p>Return hyperbolic tanh() of item (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.arcsinh", "modulename": "data_algebra.expr_rep", "qualname": "Term.arcsinh", "kind": "function", "doc": "<p>Return hyperbolic arcsinh() of item (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.arccosh", "modulename": "data_algebra.expr_rep", "qualname": "Term.arccosh", "kind": "function", "doc": "<p>Return hyperbolic arccosh() of item (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.arctanh", "modulename": "data_algebra.expr_rep", "qualname": "Term.arctanh", "kind": "function", "doc": "<p>Return hyperbolic arctanh() of item (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.floor", "modulename": "data_algebra.expr_rep", "qualname": "Term.floor", "kind": "function", "doc": "<p>Return floor() (largest int no larger than, as real type) of item (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.ceil", "modulename": "data_algebra.expr_rep", "qualname": "Term.ceil", "kind": "function", "doc": "<p>Return ceil() (smallest int no smaller than, as real type) of item (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.sum", "modulename": "data_algebra.expr_rep", "qualname": "Term.sum", "kind": "function", "doc": "<p>Return sum() of items (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.cumprod", "modulename": "data_algebra.expr_rep", "qualname": "Term.cumprod", "kind": "function", "doc": "<p>Return cumprod() of items (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.cumsum", "modulename": "data_algebra.expr_rep", "qualname": "Term.cumsum", "kind": "function", "doc": "<p>Return cumsum() of items (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.exp", "modulename": "data_algebra.expr_rep", "qualname": "Term.exp", "kind": "function", "doc": "<p>Return exp() of items (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.expm1", "modulename": "data_algebra.expr_rep", "qualname": "Term.expm1", "kind": "function", "doc": "<p>Return exp() - 1 of items (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.log", "modulename": "data_algebra.expr_rep", "qualname": "Term.log", "kind": "function", "doc": "<p>Return base e logarithm of items (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.log10", "modulename": "data_algebra.expr_rep", "qualname": "Term.log10", "kind": "function", "doc": "<p>Return base 10 logarithm of items (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.log1p", "modulename": "data_algebra.expr_rep", "qualname": "Term.log1p", "kind": "function", "doc": "<p>Return base e logarithm of 1 + items (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.mod", "modulename": "data_algebra.expr_rep", "qualname": "Term.mod", "kind": "function", "doc": "<p>Return modulo of items (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.remainder", "modulename": "data_algebra.expr_rep", "qualname": "Term.remainder", "kind": "function", "doc": "<p>Return remainder of items (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.sqrt", "modulename": "data_algebra.expr_rep", "qualname": "Term.sqrt", "kind": "function", "doc": "<p>Return sqrt of items (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.abs", "modulename": "data_algebra.expr_rep", "qualname": "Term.abs", "kind": "function", "doc": "<p>Return absolute value of items (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.maximum", "modulename": "data_algebra.expr_rep", "qualname": "Term.maximum", "kind": "function", "doc": "<p>Return per row maximum of items and other (propogate missing, vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.minimum", "modulename": "data_algebra.expr_rep", "qualname": "Term.minimum", "kind": "function", "doc": "<p>Return per row minimum of items and other (propogate missing, vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.fmax", "modulename": "data_algebra.expr_rep", "qualname": "Term.fmax", "kind": "function", "doc": "<p>Return per row fmax of items and other (ignore missing, vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.fmin", "modulename": "data_algebra.expr_rep", "qualname": "Term.fmin", "kind": "function", "doc": "<p>Return per row fmin of items and other (ignore missing, vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.round", "modulename": "data_algebra.expr_rep", "qualname": "Term.round", "kind": "function", "doc": "<p>Return rounded values (nearest integer, subject to some rules) as real (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.around", "modulename": "data_algebra.expr_rep", "qualname": "Term.around", "kind": "function", "doc": "<p>Return rounded values (given numer of decimals) as real (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.all", "modulename": "data_algebra.expr_rep", "qualname": "Term.all", "kind": "function", "doc": "<p>Return True if all items True (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.any", "modulename": "data_algebra.expr_rep", "qualname": "Term.any", "kind": "function", "doc": "<p>Return True if any items True (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.bfill", "modulename": "data_algebra.expr_rep", "qualname": "Term.bfill", "kind": "function", "doc": "<p>Return vector with missing vallues filled (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.count", "modulename": "data_algebra.expr_rep", "qualname": "Term.count", "kind": "function", "doc": "<p>Return number of non-NA cells (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.cumcount", "modulename": "data_algebra.expr_rep", "qualname": "Term.cumcount", "kind": "function", "doc": "<p>Return cumulative number of non-NA cells (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.cummax", "modulename": "data_algebra.expr_rep", "qualname": "Term.cummax", "kind": "function", "doc": "<p>Return cumulative maximum (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.cummin", "modulename": "data_algebra.expr_rep", "qualname": "Term.cummin", "kind": "function", "doc": "<p>Return cumulative minimum (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.ffill", "modulename": "data_algebra.expr_rep", "qualname": "Term.ffill", "kind": "function", "doc": "<p>Return vector with missing vallues filled (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.is_monotonic_decreasing", "modulename": "data_algebra.expr_rep", "qualname": "Term.is_monotonic_decreasing", "kind": "function", "doc": "<p>Return vector True if monotonic decreasing (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.is_monotonic_increasing", "modulename": "data_algebra.expr_rep", "qualname": "Term.is_monotonic_increasing", "kind": "function", "doc": "<p>Return vector True if monotonic increasing (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.any_value", "modulename": "data_algebra.expr_rep", "qualname": "Term.any_value", "kind": "function", "doc": "<p>Return any_value (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.first", "modulename": "data_algebra.expr_rep", "qualname": "Term.first", "kind": "function", "doc": "<p>Return first (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.last", "modulename": "data_algebra.expr_rep", "qualname": "Term.last", "kind": "function", "doc": "<p>Return last (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.max", "modulename": "data_algebra.expr_rep", "qualname": "Term.max", "kind": "function", "doc": "<p>Return max (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.mean", "modulename": "data_algebra.expr_rep", "qualname": "Term.mean", "kind": "function", "doc": "<p>Return mean (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.median", "modulename": "data_algebra.expr_rep", "qualname": "Term.median", "kind": "function", "doc": "<p>Return median (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.min", "modulename": "data_algebra.expr_rep", "qualname": "Term.min", "kind": "function", "doc": "<p>Return min (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.nunique", "modulename": "data_algebra.expr_rep", "qualname": "Term.nunique", "kind": "function", "doc": "<p>Return number of unique items (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.rank", "modulename": "data_algebra.expr_rep", "qualname": "Term.rank", "kind": "function", "doc": "<p>Return item rangings (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.size", "modulename": "data_algebra.expr_rep", "qualname": "Term.size", "kind": "function", "doc": "<p>Return number of items (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.std", "modulename": "data_algebra.expr_rep", "qualname": "Term.std", "kind": "function", "doc": "<p>Return sample standard devaition (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.var", "modulename": "data_algebra.expr_rep", "qualname": "Term.var", "kind": "function", "doc": "<p>Return sample variance (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.shift", "modulename": "data_algebra.expr_rep", "qualname": "Term.shift", "kind": "function", "doc": "<p>Return shifted items (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.is_null", "modulename": "data_algebra.expr_rep", "qualname": "Term.is_null", "kind": "function", "doc": "<p>Return which items are null (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.is_nan", "modulename": "data_algebra.expr_rep", "qualname": "Term.is_nan", "kind": "function", "doc": "<p>Return which items are nan (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.is_inf", "modulename": "data_algebra.expr_rep", "qualname": "Term.is_inf", "kind": "function", "doc": "<p>Return which items are inf (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.is_bad", "modulename": "data_algebra.expr_rep", "qualname": "Term.is_bad", "kind": "function", "doc": "<p>Return which items in a numeric column are bad (null, None, nan, or infinite) (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.if_else", "modulename": "data_algebra.expr_rep", "qualname": "Term.if_else", "kind": "function", "doc": "<p>Vectorized selection between two argument vectors.\nif_else(True, 1, 2) &gt; 1, if_else(False, 1, 2) -> 2.\nNone propagating behavior if_else(None, 1, 2) -> None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.where", "modulename": "data_algebra.expr_rep", "qualname": "Term.where", "kind": "function", "doc": "<p>Vectorized selection between two argument vectors.\nif_else(True, 1, 2) &gt; 1, if_else(False, 1, 2) -> 2.\nnumpy.where behavior: where(None, 1, 2) -> 2</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.is_in", "modulename": "data_algebra.expr_rep", "qualname": "Term.is_in", "kind": "function", "doc": "<p>Set membership (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.concat", "modulename": "data_algebra.expr_rep", "qualname": "Term.concat", "kind": "function", "doc": "<p>Concatinate strings (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.coalesce", "modulename": "data_algebra.expr_rep", "qualname": "Term.coalesce", "kind": "function", "doc": "<p>Replace missing values with alternative (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.co_equalizer", "modulename": "data_algebra.expr_rep", "qualname": "Term.co_equalizer", "kind": "function", "doc": "<p>Compute the connected components (co-equalizer).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.mapv", "modulename": "data_algebra.expr_rep", "qualname": "Term.mapv", "kind": "function", "doc": "<p>Map values to values (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value_map</span>, </span><span class=\"param\"><span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.as_int64", "modulename": "data_algebra.expr_rep", "qualname": "Term.as_int64", "kind": "function", "doc": "<p>Cast as int (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.as_str", "modulename": "data_algebra.expr_rep", "qualname": "Term.as_str", "kind": "function", "doc": "<p>Cast as string (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.trimstr", "modulename": "data_algebra.expr_rep", "qualname": "Term.trimstr", "kind": "function", "doc": "<p>Trim string start (inclusive) to stop (exclusive) (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">start</span>, </span><span class=\"param\"><span class=\"n\">stop</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.coalesce_0", "modulename": "data_algebra.expr_rep", "qualname": "Term.coalesce_0", "kind": "function", "doc": "<p>Replace missing values with zero (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.datetime_to_date", "modulename": "data_algebra.expr_rep", "qualname": "Term.datetime_to_date", "kind": "function", "doc": "<p>Convert date time to date (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.parse_datetime", "modulename": "data_algebra.expr_rep", "qualname": "Term.parse_datetime", "kind": "function", "doc": "<p>Parse string as a date time (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.parse_date", "modulename": "data_algebra.expr_rep", "qualname": "Term.parse_date", "kind": "function", "doc": "<p>Parse string as a date (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.format_datetime", "modulename": "data_algebra.expr_rep", "qualname": "Term.format_datetime", "kind": "function", "doc": "<p>Format string as a date time (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.format_date", "modulename": "data_algebra.expr_rep", "qualname": "Term.format_date", "kind": "function", "doc": "<p>Format string as a date (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.dayofweek", "modulename": "data_algebra.expr_rep", "qualname": "Term.dayofweek", "kind": "function", "doc": "<p>Convert date to date of week (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.dayofyear", "modulename": "data_algebra.expr_rep", "qualname": "Term.dayofyear", "kind": "function", "doc": "<p>Convert date to date of year (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.dayofmonth", "modulename": "data_algebra.expr_rep", "qualname": "Term.dayofmonth", "kind": "function", "doc": "<p>Convert date to day of month (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.weekofyear", "modulename": "data_algebra.expr_rep", "qualname": "Term.weekofyear", "kind": "function", "doc": "<p>Convert date to week of year (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.month", "modulename": "data_algebra.expr_rep", "qualname": "Term.month", "kind": "function", "doc": "<p>Convert date to month (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.quarter", "modulename": "data_algebra.expr_rep", "qualname": "Term.quarter", "kind": "function", "doc": "<p>Convert date to quarter (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.year", "modulename": "data_algebra.expr_rep", "qualname": "Term.year", "kind": "function", "doc": "<p>Convert date to year (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.timestamp_diff", "modulename": "data_algebra.expr_rep", "qualname": "Term.timestamp_diff", "kind": "function", "doc": "<p>Compute difference in timestamps in seconds (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.date_diff", "modulename": "data_algebra.expr_rep", "qualname": "Term.date_diff", "kind": "function", "doc": "<p>Compute difference in dates in days (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Term.base_Sunday", "modulename": "data_algebra.expr_rep", "qualname": "Term.base_Sunday", "kind": "function", "doc": "<p>Compute prior Sunday date from date (self for Sundays) (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.kop_expr", "modulename": "data_algebra.expr_rep", "qualname": "kop_expr", "kind": "function", "doc": "<p>three argument expression</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">op</span>, </span><span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">inline</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Value", "modulename": "data_algebra.expr_rep", "qualname": "Value", "kind": "class", "doc": "<p>Class for holding constants.</p>\n", "bases": "Term"}, {"fullname": "data_algebra.expr_rep.Value.__init__", "modulename": "data_algebra.expr_rep", "qualname": "Value.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span>)</span>"}, {"fullname": "data_algebra.expr_rep.Value.is_equal", "modulename": "data_algebra.expr_rep", "qualname": "Value.is_equal", "kind": "function", "doc": "<p>Check if this expression code is the same as another expression.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Value.act_on", "modulename": "data_algebra.expr_rep", "qualname": "Value.act_on", "kind": "function", "doc": "<p>Apply expression to argument.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">arg</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">expr_walker</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">expression_walker</span><span class=\"o\">.</span><span class=\"n\">ExpressionWalker</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Value.to_python", "modulename": "data_algebra.expr_rep", "qualname": "Value.to_python", "kind": "function", "doc": "<p>Convert parsed expression into a string</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>want_inline_parens</strong>:  bool, if True put parens around complex expressions that don't already have a grouper.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>PythonText</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">want_inline_parens</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">expr_rep</span><span class=\"o\">.</span><span class=\"n\">PythonText</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.lit", "modulename": "data_algebra.expr_rep", "qualname": "lit", "kind": "function", "doc": "<p>Represent a value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.ListTerm", "modulename": "data_algebra.expr_rep", "qualname": "ListTerm", "kind": "class", "doc": "<p>Class to hold a collection.</p>\n", "bases": "PreTerm"}, {"fullname": "data_algebra.expr_rep.ListTerm.__init__", "modulename": "data_algebra.expr_rep", "qualname": "ListTerm.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span>)</span>"}, {"fullname": "data_algebra.expr_rep.ListTerm.is_equal", "modulename": "data_algebra.expr_rep", "qualname": "ListTerm.is_equal", "kind": "function", "doc": "<p>Check if this expression code is the same as another expression.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.ListTerm.act_on", "modulename": "data_algebra.expr_rep", "qualname": "ListTerm.act_on", "kind": "function", "doc": "<p>Apply expression to argument.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">arg</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">expr_walker</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">expression_walker</span><span class=\"o\">.</span><span class=\"n\">ExpressionWalker</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.ListTerm.to_python", "modulename": "data_algebra.expr_rep", "qualname": "ListTerm.to_python", "kind": "function", "doc": "<p>Convert parsed expression into a string</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>want_inline_parens</strong>:  bool, if True put parens around complex expressions that don't already have a grouper.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>PythonText</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">want_inline_parens</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">expr_rep</span><span class=\"o\">.</span><span class=\"n\">PythonText</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.ListTerm.get_column_names", "modulename": "data_algebra.expr_rep", "qualname": "ListTerm.get_column_names", "kind": "function", "doc": "<p>Add column names to columns_seen</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>columns_seen</strong>:  set of strings</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">columns_seen</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.DictTerm", "modulename": "data_algebra.expr_rep", "qualname": "DictTerm", "kind": "class", "doc": "<p>Class for carrying a dictionary or map.</p>\n", "bases": "PreTerm"}, {"fullname": "data_algebra.expr_rep.DictTerm.__init__", "modulename": "data_algebra.expr_rep", "qualname": "DictTerm.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span>)</span>"}, {"fullname": "data_algebra.expr_rep.DictTerm.is_equal", "modulename": "data_algebra.expr_rep", "qualname": "DictTerm.is_equal", "kind": "function", "doc": "<p>Check if this expression code is the same as another expression.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.DictTerm.act_on", "modulename": "data_algebra.expr_rep", "qualname": "DictTerm.act_on", "kind": "function", "doc": "<p>Apply expression to argument.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">arg</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">expr_walker</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">expression_walker</span><span class=\"o\">.</span><span class=\"n\">ExpressionWalker</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.DictTerm.to_python", "modulename": "data_algebra.expr_rep", "qualname": "DictTerm.to_python", "kind": "function", "doc": "<p>Convert parsed expression into a string</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>want_inline_parens</strong>:  bool, if True put parens around complex expressions that don't already have a grouper.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>PythonText</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">want_inline_parens</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">expr_rep</span><span class=\"o\">.</span><span class=\"n\">PythonText</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.enc_value", "modulename": "data_algebra.expr_rep", "qualname": "enc_value", "kind": "function", "doc": "<p>Encode a value as a PreTerm or derived class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.ColumnReference", "modulename": "data_algebra.expr_rep", "qualname": "ColumnReference", "kind": "class", "doc": "<p>class to represent referring to a column</p>\n", "bases": "Term"}, {"fullname": "data_algebra.expr_rep.ColumnReference.__init__", "modulename": "data_algebra.expr_rep", "qualname": "ColumnReference.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">column_name</span></span>)</span>"}, {"fullname": "data_algebra.expr_rep.ColumnReference.act_on", "modulename": "data_algebra.expr_rep", "qualname": "ColumnReference.act_on", "kind": "function", "doc": "<p>Apply expression to argument.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">arg</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">expr_walker</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">expression_walker</span><span class=\"o\">.</span><span class=\"n\">ExpressionWalker</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.ColumnReference.is_equal", "modulename": "data_algebra.expr_rep", "qualname": "ColumnReference.is_equal", "kind": "function", "doc": "<p>Check if this expression code is the same as another expression.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.ColumnReference.to_python", "modulename": "data_algebra.expr_rep", "qualname": "ColumnReference.to_python", "kind": "function", "doc": "<p>Convert parsed expression into a string</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>want_inline_parens</strong>:  bool, if True put parens around complex expressions that don't already have a grouper.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>PythonText</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">want_inline_parens</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">expr_rep</span><span class=\"o\">.</span><span class=\"n\">PythonText</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.ColumnReference.get_column_names", "modulename": "data_algebra.expr_rep", "qualname": "ColumnReference.get_column_names", "kind": "function", "doc": "<p>Add column names to columns_seen</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>columns_seen</strong>:  set of strings</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">columns_seen</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.col", "modulename": "data_algebra.expr_rep", "qualname": "col", "kind": "function", "doc": "<p>represent a column or value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nm</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Expression", "modulename": "data_algebra.expr_rep", "qualname": "Expression", "kind": "class", "doc": "<p>Class for carrying an expression.</p>\n", "bases": "Term"}, {"fullname": "data_algebra.expr_rep.Expression.__init__", "modulename": "data_algebra.expr_rep", "qualname": "Expression.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">inline</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "data_algebra.expr_rep.Expression.is_equal", "modulename": "data_algebra.expr_rep", "qualname": "Expression.is_equal", "kind": "function", "doc": "<p>Check if this expression code is the same as another expression.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Expression.get_column_names", "modulename": "data_algebra.expr_rep", "qualname": "Expression.get_column_names", "kind": "function", "doc": "<p>Add column names to columns_seen</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>columns_seen</strong>:  set of strings</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">columns_seen</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Expression.get_method_names", "modulename": "data_algebra.expr_rep", "qualname": "Expression.get_method_names", "kind": "function", "doc": "<p>Add names of methods used to methods_seen.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>methods_seen</strong>:  set to collect results</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">methods_seen</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Expression.act_on", "modulename": "data_algebra.expr_rep", "qualname": "Expression.act_on", "kind": "function", "doc": "<p>Apply expression to argument.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">arg</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">expr_walker</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">expression_walker</span><span class=\"o\">.</span><span class=\"n\">ExpressionWalker</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.Expression.to_python", "modulename": "data_algebra.expr_rep", "qualname": "Expression.to_python", "kind": "function", "doc": "<p>Convert parsed expression into a string</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>want_inline_parens</strong>:  bool, if True put parens around complex expressions that don't already have a grouper.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>PythonText</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">want_inline_parens</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">expr_rep</span><span class=\"o\">.</span><span class=\"n\">PythonText</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.connected_components", "modulename": "data_algebra.expr_rep", "qualname": "connected_components", "kind": "function", "doc": "<p>Compute connected components.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">g</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.standardize_join_type", "modulename": "data_algebra.expr_rep", "qualname": "standardize_join_type", "kind": "function", "doc": "<p>Replace join name with standard name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">join_str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.get_columns_used", "modulename": "data_algebra.expr_rep", "qualname": "get_columns_used", "kind": "function", "doc": "<p>Return set of columns used in an expression.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parsed_exprs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expr_rep.implies_windowed", "modulename": "data_algebra.expr_rep", "qualname": "implies_windowed", "kind": "function", "doc": "<p>Return true if expression implies a windowed calculation is needed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parsed_exprs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expression_walker", "modulename": "data_algebra.expression_walker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "data_algebra.expression_walker.ExpressionWalker", "modulename": "data_algebra.expression_walker", "qualname": "ExpressionWalker", "kind": "class", "doc": "<p>Abstract class will expression walking callbacks.</p>\n", "bases": "abc.ABC"}, {"fullname": "data_algebra.expression_walker.ExpressionWalker.act_on_literal", "modulename": "data_algebra.expression_walker", "qualname": "ExpressionWalker.act_on_literal", "kind": "function", "doc": "<p>Action for a literal/constant in an expression.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  literal value being supplied</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>converted result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expression_walker.ExpressionWalker.act_on_column_name", "modulename": "data_algebra.expression_walker", "qualname": "ExpressionWalker.act_on_column_name", "kind": "function", "doc": "<p>Action for a column name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arg</strong>:  None</li>\n<li><strong>value</strong>:  column name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>arg acted on</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">arg</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.expression_walker.ExpressionWalker.act_on_expression", "modulename": "data_algebra.expression_walker", "qualname": "ExpressionWalker.act_on_expression", "kind": "function", "doc": "<p>Action for a column name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arg</strong>:  None</li>\n<li><strong>values</strong>:  list of values to work on</li>\n<li><strong>op</strong>:  data_algebra.expr_rep.Expression operator to apply</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>arg acted on</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">arg</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">List</span>, </span><span class=\"param\"><span class=\"n\">op</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.flow_text", "modulename": "data_algebra.flow_text", "kind": "module", "doc": "<p>Flow text around a margin for presentation.</p>\n"}, {"fullname": "data_algebra.flow_text.flow_text", "modulename": "data_algebra.flow_text", "qualname": "flow_text", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tokens</strong>:  list or tuple of strings</li>\n<li><strong>align_right</strong>:  integer, right alignment margin</li>\n<li><strong>sep_width</strong>:  integer, size of inline separator</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of lists of strings flowing the text to the margin</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tokens</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">align_right</span><span class=\"o\">=</span><span class=\"mi\">70</span>, </span><span class=\"param\"><span class=\"n\">sep_width</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.near_sql", "modulename": "data_algebra.near_sql", "kind": "module", "doc": "<p>Representation for operations that are nearly translated into SQL.</p>\n"}, {"fullname": "data_algebra.near_sql.SQLWithList", "modulename": "data_algebra.near_sql", "qualname": "SQLWithList", "kind": "class", "doc": "<p>Carry an ordered sequence of SQL steps for use with a SQL WITH statement.</p>\n"}, {"fullname": "data_algebra.near_sql.SQLWithList.__init__", "modulename": "data_algebra.near_sql", "qualname": "SQLWithList.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">last_step</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>,</span><span class=\"param\">\t<span class=\"n\">previous_steps</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQLContainer</span><span class=\"p\">]]</span></span>)</span>"}, {"fullname": "data_algebra.near_sql.NearSQL", "modulename": "data_algebra.near_sql", "qualname": "NearSQL", "kind": "class", "doc": "<p>Represent SQL queries in a mostly string-form</p>\n", "bases": "abc.ABC"}, {"fullname": "data_algebra.near_sql.NearSQL.to_bound_near_sql", "modulename": "data_algebra.near_sql", "qualname": "NearSQL.to_bound_near_sql", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force_sql</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">public_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">public_name_quoted</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQLContainer</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.near_sql.NearSQL.to_sql_str_list", "modulename": "data_algebra.near_sql", "qualname": "NearSQL.to_sql_str_list", "kind": "function", "doc": "<p>export</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force_sql</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.near_sql.NearSQL.to_with_form", "modulename": "data_algebra.near_sql", "qualname": "NearSQL.to_with_form", "kind": "function", "doc": "<p>convert ot with form</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">cte_cache</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">SQLWithList</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.near_sql.NearSQLContainer", "modulename": "data_algebra.near_sql", "qualname": "NearSQLContainer", "kind": "class", "doc": "<p>NearSQL with bound in columns, force_sql</p>\n"}, {"fullname": "data_algebra.near_sql.NearSQLContainer.__init__", "modulename": "data_algebra.near_sql", "qualname": "NearSQLContainer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">near_sql</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQL</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force_sql</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">public_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">public_name_quoted</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "data_algebra.near_sql.NearSQLContainer.convert_subsql", "modulename": "data_algebra.near_sql", "qualname": "NearSQLContainer.convert_subsql", "kind": "function", "doc": "<p>Convert subsql, possibly adding query name</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">quoted_query_name_annotation</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.near_sql.NearSQLContainer.to_with_form_stub", "modulename": "data_algebra.near_sql", "qualname": "NearSQLContainer.to_with_form_stub", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">cte_cache</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQLContainer</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQLContainer</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.near_sql.NearSQLNamedEntity", "modulename": "data_algebra.near_sql", "qualname": "NearSQLNamedEntity", "kind": "class", "doc": "<p>Model for tables and common table expressions</p>\n", "bases": "NearSQL, abc.ABC"}, {"fullname": "data_algebra.near_sql.NearSQLNamedEntity.to_with_form", "modulename": "data_algebra.near_sql", "qualname": "NearSQLNamedEntity.to_with_form", "kind": "function", "doc": "<p>convert ot with form</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">cte_cache</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">SQLWithList</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.near_sql.NearSQLNamedEntity.to_sql_str_list", "modulename": "data_algebra.near_sql", "qualname": "NearSQLNamedEntity.to_sql_str_list", "kind": "function", "doc": "<p>export</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force_sql</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.near_sql.NearSQLCommonTableExpression", "modulename": "data_algebra.near_sql", "qualname": "NearSQLCommonTableExpression", "kind": "class", "doc": "<p>Model for tables and common table expressions</p>\n", "bases": "NearSQLNamedEntity"}, {"fullname": "data_algebra.near_sql.NearSQLCommonTableExpression.__init__", "modulename": "data_algebra.near_sql", "qualname": "NearSQLCommonTableExpression.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">query_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">quoted_query_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">ops_key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "data_algebra.near_sql.NearSQLCommonTableExpression.to_sql_str_list", "modulename": "data_algebra.near_sql", "qualname": "NearSQLCommonTableExpression.to_sql_str_list", "kind": "function", "doc": "<p>export</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force_sql</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.near_sql.NearSQLTable", "modulename": "data_algebra.near_sql", "qualname": "NearSQLTable", "kind": "class", "doc": "<p>Model for tables and common table expressions</p>\n", "bases": "NearSQLNamedEntity"}, {"fullname": "data_algebra.near_sql.NearSQLTable.__init__", "modulename": "data_algebra.near_sql", "qualname": "NearSQLTable.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">terms</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">quoted_table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "data_algebra.near_sql.NearSQLTable.to_sql_str_list", "modulename": "data_algebra.near_sql", "qualname": "NearSQLTable.to_sql_str_list", "kind": "function", "doc": "<p>export</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force_sql</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.near_sql.NearSQLUnaryStep", "modulename": "data_algebra.near_sql", "qualname": "NearSQLUnaryStep", "kind": "class", "doc": "<p>Represent SQL queries in a mostly string-form</p>\n", "bases": "NearSQL"}, {"fullname": "data_algebra.near_sql.NearSQLUnaryStep.__init__", "modulename": "data_algebra.near_sql", "qualname": "NearSQLUnaryStep.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">terms</span>,</span><span class=\"param\">\t<span class=\"n\">query_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">quoted_query_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sub_sql</span>,</span><span class=\"param\">\t<span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">annotation</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ops_key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">mergeable</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">declared_term_dependencies</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "data_algebra.near_sql.NearSQLUnaryStep.to_sql_str_list", "modulename": "data_algebra.near_sql", "qualname": "NearSQLUnaryStep.to_sql_str_list", "kind": "function", "doc": "<p>export</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force_sql</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.near_sql.NearSQLUnaryStep.to_with_form", "modulename": "data_algebra.near_sql", "qualname": "NearSQLUnaryStep.to_with_form", "kind": "function", "doc": "<p>convert ot with form</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">cte_cache</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">SQLWithList</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.near_sql.NearSQLBinaryStep", "modulename": "data_algebra.near_sql", "qualname": "NearSQLBinaryStep", "kind": "class", "doc": "<p>Represent SQL queries in a mostly string-form</p>\n", "bases": "NearSQL"}, {"fullname": "data_algebra.near_sql.NearSQLBinaryStep.__init__", "modulename": "data_algebra.near_sql", "qualname": "NearSQLBinaryStep.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">terms</span>,</span><span class=\"param\">\t<span class=\"n\">query_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">quoted_query_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sub_sql1</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQLContainer</span>,</span><span class=\"param\">\t<span class=\"n\">joiner</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sub_sql2</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQLContainer</span>,</span><span class=\"param\">\t<span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">annotation</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ops_key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "data_algebra.near_sql.NearSQLBinaryStep.to_sql_str_list", "modulename": "data_algebra.near_sql", "qualname": "NearSQLBinaryStep.to_sql_str_list", "kind": "function", "doc": "<p>export</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force_sql</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.near_sql.NearSQLBinaryStep.to_with_form", "modulename": "data_algebra.near_sql", "qualname": "NearSQLBinaryStep.to_with_form", "kind": "function", "doc": "<p>convert ot with form</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">cte_cache</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">SQLWithList</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.near_sql.NearSQLRawQStep", "modulename": "data_algebra.near_sql", "qualname": "NearSQLRawQStep", "kind": "class", "doc": "<p>Represent SQL queries in a mostly string-form</p>\n", "bases": "NearSQL"}, {"fullname": "data_algebra.near_sql.NearSQLRawQStep.__init__", "modulename": "data_algebra.near_sql", "qualname": "NearSQLRawQStep.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">query_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">quoted_query_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sub_sql</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">NearSQLContainer</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">suffix</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">annotation</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ops_key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">add_select</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "data_algebra.near_sql.NearSQLRawQStep.to_sql_str_list", "modulename": "data_algebra.near_sql", "qualname": "NearSQLRawQStep.to_sql_str_list", "kind": "function", "doc": "<p>export</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force_sql</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">db_model</span>,</span><span class=\"param\">\t<span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.near_sql.NearSQLRawQStep.to_with_form", "modulename": "data_algebra.near_sql", "qualname": "NearSQLRawQStep.to_with_form", "kind": "function", "doc": "<p>convert ot with form</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">cte_cache</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">near_sql</span><span class=\"o\">.</span><span class=\"n\">SQLWithList</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_catalog", "modulename": "data_algebra.op_catalog", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "data_algebra.op_container", "modulename": "data_algebra.op_container", "kind": "module", "doc": "<p>Redirecting container.</p>\n"}, {"fullname": "data_algebra.op_container.OpC", "modulename": "data_algebra.op_container", "qualname": "OpC", "kind": "class", "doc": "<p>Container that redirects to another to non-quoted notation.</p>\n", "bases": "data_algebra.data_ops_types.OperatorPlatform"}, {"fullname": "data_algebra.op_container.OpC.__init__", "modulename": "data_algebra.op_container", "qualname": "OpC.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span></span>)</span>"}, {"fullname": "data_algebra.op_container.OpC.set", "modulename": "data_algebra.op_container", "qualname": "OpC.set", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.methods_used", "modulename": "data_algebra.op_container", "qualname": "OpC.methods_used", "kind": "function", "doc": "<p>Return set of methods used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops_types</span><span class=\"o\">.</span><span class=\"n\">MethodUse</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.get_ops", "modulename": "data_algebra.op_container", "qualname": "OpC.get_ops", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.ex", "modulename": "data_algebra.op_container", "qualname": "OpC.ex", "kind": "function", "doc": "<p>Evaluate operators with respect to Pandas data frames already stored in the operator chain.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_model</strong>:  adaptor to data dialect (Pandas for now)</li>\n<li><strong>allow_limited_tables</strong>:  logical, if True allow execution on non-complete tables</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">allow_limited_tables</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.transform", "modulename": "data_algebra.op_container", "qualname": "OpC.transform", "kind": "function", "doc": "<p>apply self to data frame X, may or may not commute with composition</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  input data frame</li>\n<li><strong>data_model</strong>:  implementation to use</li>\n<li><strong>strict</strong>:  if True, throw on unexpected columns</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data frame</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.act_on", "modulename": "data_algebra.op_container", "qualname": "OpC.act_on", "kind": "function", "doc": "<p>apply self to X, must associate with composition\nOperator is strict about column names.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  input data frame\n:param data_model implementation to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.replace_leaves", "modulename": "data_algebra.op_container", "qualname": "OpC.replace_leaves", "kind": "function", "doc": "<p>Replace leaves of DAG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>:  operators to apply to\n:param replacement_map, table/sqlkeys mapped to replacement Operator platforms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new operator DAG</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">replacement_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.eval", "modulename": "data_algebra.op_container", "qualname": "OpC.eval", "kind": "function", "doc": "<p>Evaluate operators with respect to Pandas data frames.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_map</strong>:  map from table names to data frames or data sources</li>\n<li><strong>data_model</strong>:  adaptor to data dialect (Pandas for now)</li>\n<li><strong>strict</strong>:  if True, throw on unexpected columns</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.get_tables", "modulename": "data_algebra.op_container", "qualname": "OpC.get_tables", "kind": "function", "doc": "<p>Get a dictionary of all tables used in an operator DAG,\nraise an exception if the values are not consistent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.add", "modulename": "data_algebra.op_container", "qualname": "OpC.add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.columns_produced", "modulename": "data_algebra.op_container", "qualname": "OpC.columns_produced", "kind": "function", "doc": "<p>Return list of columns produced by pipeline.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.to_near_sql_implementation_", "modulename": "data_algebra.op_container", "qualname": "OpC.to_near_sql_implementation_", "kind": "function", "doc": "<p>Convert to NearSQL as a step in converting to a SQL string. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_model</strong>:  database model</li>\n<li><strong>using</strong>:  optional column restriction</li>\n<li><strong>temp_id_source</strong>:  temporary id source.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">db_model</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">using</span>, </span><span class=\"param\"><span class=\"n\">temp_id_source</span>, </span><span class=\"param\"><span class=\"n\">sql_format_options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.extend_parsed_", "modulename": "data_algebra.op_container", "qualname": "OpC.extend_parsed_", "kind": "function", "doc": "<p>Add new derived columns, can replace existing columns for parsed operations. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parsed_ops</strong>:  dictionary of calculations to perform.</li>\n<li><strong>partition_by</strong>:  optional window partition specification.</li>\n<li><strong>order_by</strong>:  optional window ordering specification.</li>\n<li><strong>reverse</strong>:  optional order reversal specification.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parsed_ops</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">partition_by</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.extend", "modulename": "data_algebra.op_container", "qualname": "OpC.extend", "kind": "function", "doc": "<p>Add new derived columns, can replace existing columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ops</strong>:  dictionary of calculations to perform.</li>\n<li><strong>partition_by</strong>:  optional window partition specification.</li>\n<li><strong>order_by</strong>:  optional window ordering specification.</li>\n<li><strong>reverse</strong>:  optional order reversal specification.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ops</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">partition_by</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.project_parsed_", "modulename": "data_algebra.op_container", "qualname": "OpC.project_parsed_", "kind": "function", "doc": "<p>Compute projection, or grouped calculation for parsed ops. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parsed_ops</strong>:  dictionary of calculations to perform, can be empty.</li>\n<li><strong>group_by</strong>:  optional group key(s) specification.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parsed_ops</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">group_by</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.project", "modulename": "data_algebra.op_container", "qualname": "OpC.project", "kind": "function", "doc": "<p>Compute projection, or grouped calculation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ops</strong>:  dictionary of calculations to perform, can be empty.</li>\n<li><strong>group_by</strong>:  optional group key(s) specification.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ops</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">group_by</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.natural_join", "modulename": "data_algebra.op_container", "qualname": "OpC.natural_join", "kind": "function", "doc": "<p>Join self (left) results with b (right).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>b</strong>:  second or right table to join to.</li>\n<li><strong>on</strong>:  list of join column names to enforce equality on.</li>\n<li><strong>jointype</strong>:  name of join type.</li>\n<li><strong>check_all_common_keys_in_equi_spec</strong>:  if True, raise if any non-equality key columns are common to tables.</li>\n<li><strong>by</strong>:  synonym for on, only set at most one of on or by (deprecated).</li>\n<li><strong>check_all_common_keys_in_by</strong>:  synonym for check_all_common_keys_in_equi_spec (deprecated).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">b</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">on</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">jointype</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">check_all_common_keys_in_equi_spec</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">by</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">check_all_common_keys_in_by</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.concat_rows", "modulename": "data_algebra.op_container", "qualname": "OpC.concat_rows", "kind": "function", "doc": "<p>Union or concatenate rows of self with rows of b.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>b</strong>:  table with rows to add.</li>\n<li><strong>id_column</strong>:  optional name for new source identification column.</li>\n<li><strong>a_name</strong>:  source annotation to use for self/a.</li>\n<li><strong>b_name</strong>:  source annotation to use for b.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">id_column</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_name&#39;</span>, </span><span class=\"param\"><span class=\"n\">a_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;a&#39;</span>, </span><span class=\"param\"><span class=\"n\">b_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;b&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.select_rows_parsed_", "modulename": "data_algebra.op_container", "qualname": "OpC.select_rows_parsed_", "kind": "function", "doc": "<p>Select rows matching parsed expr criteria. Internal method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parsed_expr</strong>:  logical expression specifying desired rows.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parsed_expr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.select_rows", "modulename": "data_algebra.op_container", "qualname": "OpC.select_rows", "kind": "function", "doc": "<p>Select rows matching expr criteria.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>expr</strong>:  logical expression specifying desired rows.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">expr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.drop_columns", "modulename": "data_algebra.op_container", "qualname": "OpC.drop_columns", "kind": "function", "doc": "<p>Remove columns from result.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>column_deletions</strong>:  list of columns to remove.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column_deletions</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.select_columns", "modulename": "data_algebra.op_container", "qualname": "OpC.select_columns", "kind": "function", "doc": "<p>Narrow to columns in result.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>columns</strong>:  list of columns to keep.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">columns</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.map_columns", "modulename": "data_algebra.op_container", "qualname": "OpC.map_columns", "kind": "function", "doc": "<p>Map column names or rename.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>column_remapping</strong>:  dictionary mapping old column sources to new column names (same\ndirection as Pandas rename).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column_remapping</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.rename_columns", "modulename": "data_algebra.op_container", "qualname": "OpC.rename_columns", "kind": "function", "doc": "<p>Rename columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>column_remapping</strong>:  dictionary mapping new column names to old column sources (same\ndirection as extend).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column_remapping</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.order_rows", "modulename": "data_algebra.op_container", "qualname": "OpC.order_rows", "kind": "function", "doc": "<p>Order rows by column set.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>columns</strong>:  columns to order by.</li>\n<li><strong>reverse</strong>:  optional columns to reverse order.</li>\n<li><strong>limit</strong>:  optional row limit to impose on result.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">columns</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.convert_records", "modulename": "data_algebra.op_container", "qualname": "OpC.convert_records", "kind": "function", "doc": "<p>Apply a record mapping taking blocks_in to blocks_out structures.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>record_map</strong>:  data_algebra.cdata.RecordMap transform specification</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_map</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.map_records", "modulename": "data_algebra.op_container", "qualname": "OpC.map_records", "kind": "function", "doc": "<p>Apply a record mapping taking blocks_in to blocks_out structures.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>blocks_in</strong>:  Optional incoming record specification</li>\n<li><strong>blocks_out</strong>:  Optional incoming record specification</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>compose operator directed acyclic graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">blocks_in</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">blocks_out</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.fit", "modulename": "data_algebra.op_container", "qualname": "OpC.fit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.fit_transform", "modulename": "data_algebra.op_container", "qualname": "OpC.fit_transform", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.OpC.get_feature_names", "modulename": "data_algebra.op_container", "qualname": "OpC.get_feature_names", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_features</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.op_container.Pipeline", "modulename": "data_algebra.op_container", "qualname": "Pipeline", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "data_algebra.op_container.Pipeline.__init__", "modulename": "data_algebra.op_container", "qualname": "Pipeline.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">other</span></span>)</span>"}, {"fullname": "data_algebra.pandas_base", "modulename": "data_algebra.pandas_base", "kind": "module", "doc": "<p>Base class for adapters for Pandas-like APIs</p>\n"}, {"fullname": "data_algebra.pandas_base.none_mark_scalar_or_length", "modulename": "data_algebra.pandas_base", "qualname": "none_mark_scalar_or_length", "kind": "function", "doc": "<p>Test if item is a scalar (returning None) if it is, else length of object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong>:  value to test</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None if value is a scalar, else length.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.promote_scalar_to_array", "modulename": "data_algebra.pandas_base", "qualname": "promote_scalar_to_array", "kind": "function", "doc": "<p>Convert a scalar into a vector. Pass a non-trivial array through.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>vi</strong>:  value to promote to scalar\n:target_len: length for vector</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vi</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">target_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase", "kind": "class", "doc": "<p>Base class for implementing the data algebra on pandas-like APIs</p>\n", "bases": "data_algebra.data_model.DataModel, data_algebra.expression_walker.ExpressionWalker, abc.ABC"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.__init__", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">pd</span><span class=\"p\">:</span> <span class=\"n\">module</span>, </span><span class=\"param\"><span class=\"n\">presentation_model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.data_frame", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.data_frame", "kind": "function", "doc": "<p>Build a new emtpy data frame.</p>\n\n<p>:param arg\" optional argument passed to constructor.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data frame</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">arg</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.is_appropriate_data_instance", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.is_appropriate_data_instance", "kind": "function", "doc": "<p>Check if df is our type of data frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.clean_copy", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.clean_copy", "kind": "function", "doc": "<p>Copy of data frame without indices.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.to_pandas", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.to_pandas", "kind": "function", "doc": "<p>Convert to Pandas</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.drop_indices", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.drop_indices", "kind": "function", "doc": "<p>Drop indices in place.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.can_convert_col_to_numeric", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.can_convert_col_to_numeric", "kind": "function", "doc": "<p>Return True if column or value can be converted to numeric type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.to_numeric", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.to_numeric", "kind": "function", "doc": "<p>Convert column to numeric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"s1\">&#39;coerce&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.isnull", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.isnull", "kind": "function", "doc": "<p>Return vector indicating which entries are null (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.isnan", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.isnan", "kind": "function", "doc": "<p>Return vector indicating which entries are nan (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.isinf", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.isinf", "kind": "function", "doc": "<p>Return vector indicating which entries are nan (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.bad_column_positions", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.bad_column_positions", "kind": "function", "doc": "<p>Return vector indicating which entries are bad (null or nan) (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.concat_rows", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.concat_rows", "kind": "function", "doc": "<p>Concatenate rows from frame_list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">frame_list</span><span class=\"p\">:</span> <span class=\"n\">List</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.concat_columns", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.concat_columns", "kind": "function", "doc": "<p>Concatenate columns from frame_list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">frame_list</span><span class=\"p\">:</span> <span class=\"n\">List</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.get_cell", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.get_cell", "kind": "function", "doc": "<p>get a value from a cell</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">colname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.set_col", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.set_col", "kind": "function", "doc": "<p>set column, return ref</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"n\">colname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.table_is_keyed_by_columns", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.table_is_keyed_by_columns", "kind": "function", "doc": "<p>Check if a table is keyed by a given list of column names.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>table</strong>:  DataFrame</li>\n<li><strong>column_names</strong>:  list of column names</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if rows are uniquely keyed by values in named columns</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">column_names</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.columns_to_frame_", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.columns_to_frame_", "kind": "function", "doc": "<p>Convert a dictionary of column names to series-like objects and scalars into a Pandas data frame.\nDeal with special cases, such as some columns coming in as scalars (often from Panda aggregation).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cols</strong>:  dictionary mapping column names to columns</li>\n<li><strong>target_rows</strong>:  number of rows we are shooting for</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Pandas data frame.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cols</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">target_rows</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.add_data_frame_columns_to_data_frame_", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.add_data_frame_columns_to_data_frame_", "kind": "function", "doc": "<p>Add columns from transient_new_frame to res. Res may be altered, and either of res or\ntransient_new_frame may be returned.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">res</span>, </span><span class=\"param\"><span class=\"n\">transient_new_frame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.eval", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.eval", "kind": "function", "doc": "<p>Implementation of Pandas evaluation of operators</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>op</strong>:  ViewRepresentation to evaluate</li>\n<li><strong>data_map</strong>:  dictionary mapping table and view names to data frames or data sources</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data frame result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">op</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">data_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.standardize_join_code_", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.standardize_join_code_", "kind": "function", "doc": "<p>Map join names to Pandas names. Internal method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">jointype</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.blocks_to_rowrecs", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.blocks_to_rowrecs", "kind": "function", "doc": "<p>Convert a block record (record spanning multiple rows) into a rowrecord (record in a single row).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  data frame to be transformed</li>\n<li><strong>blocks_in</strong>:  cdata record specification</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data frame</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">blocks_in</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.rowrecs_to_blocks", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.rowrecs_to_blocks", "kind": "function", "doc": "<p>Convert rowrecs (single row records) into block records (multiple row records).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  data frame to transform.</li>\n<li><strong>blocks_out</strong>:  cdata record specification.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data frame</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">blocks_out</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.act_on_literal", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.act_on_literal", "kind": "function", "doc": "<p>Action for a literal/constant in an expression.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  literal value being supplied</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>converted result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.act_on_column_name", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.act_on_column_name", "kind": "function", "doc": "<p>Action for a column name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arg</strong>:  item we are acting on</li>\n<li><strong>value</strong>:  column name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>arg acted on</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">arg</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_base.PandasModelBase.act_on_expression", "modulename": "data_algebra.pandas_base", "qualname": "PandasModelBase.act_on_expression", "kind": "function", "doc": "<p>Action for a column name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arg</strong>:  item we are acting on</li>\n<li><strong>values</strong>:  list of values to work on</li>\n<li><strong>op</strong>:  operator to apply</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>arg acted on</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">arg</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">List</span>, </span><span class=\"param\"><span class=\"n\">op</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.pandas_model", "modulename": "data_algebra.pandas_model", "kind": "module", "doc": "<p>Adapter for Pandas API.</p>\n"}, {"fullname": "data_algebra.pandas_model.PandasModel", "modulename": "data_algebra.pandas_model", "qualname": "PandasModel", "kind": "class", "doc": "<p>Realize the data algebra over pandas.</p>\n", "bases": "data_algebra.pandas_base.PandasModelBase"}, {"fullname": "data_algebra.pandas_model.PandasModel.__init__", "modulename": "data_algebra.pandas_model", "qualname": "PandasModel.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "data_algebra.pandas_model.register_pandas_model", "modulename": "data_algebra.pandas_model", "qualname": "register_pandas_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.parse_by_lark", "modulename": "data_algebra.parse_by_lark", "kind": "module", "doc": "<p>Use Lark to parse a near-Python expression grammar.</p>\n"}, {"fullname": "data_algebra.parse_by_lark.parse_by_lark", "modulename": "data_algebra.parse_by_lark", "qualname": "parse_by_lark", "kind": "function", "doc": "<p>Parse an expression in terms of data views and values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source_str</strong>:  string to parse</li>\n<li><strong>data_def</strong>:  dictionary of data_algebra.expr_rep.ColumnReference</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data_algebra.expr_rep.Term</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">data_def</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">expr_rep</span><span class=\"o\">.</span><span class=\"n\">Term</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model", "modulename": "data_algebra.polars_model", "kind": "module", "doc": "<p>Adapter to use Polars ( <a href=\"https://www.pola.rs\">https://www.pola.rs</a> ) in the data algebra.</p>\n\n<p>Note: fully not implemented yet.</p>\n"}, {"fullname": "data_algebra.polars_model.PolarsTerm", "modulename": "data_algebra.polars_model", "qualname": "PolarsTerm", "kind": "class", "doc": "<p>Class to carry Polars expression term and annotations about expression tree.</p>\n"}, {"fullname": "data_algebra.polars_model.PolarsTerm.__init__", "modulename": "data_algebra.polars_model", "qualname": "PolarsTerm.__init__", "kind": "function", "doc": "<p>Carry a Polars expression term (polars_term) plus annotations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>polars_term</strong>:  Optional Polars expression (None means collect info, not a true term)</li>\n<li><strong>is_literal</strong>:  True if term is a constant</li>\n<li><strong>is_column</strong>:  True if term is a column name</li>\n<li><strong>lit_value</strong>:  original value for a literal</li>\n<li><strong>inputs</strong>:  inputs to expression node</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">polars_term</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">is_literal</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">is_column</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">is_series</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">lit_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "data_algebra.polars_model.ExpressionRequirementsCollector", "modulename": "data_algebra.polars_model", "qualname": "ExpressionRequirementsCollector", "kind": "class", "doc": "<p>Class to collect what accommodations an expression needs.</p>\n", "bases": "data_algebra.expression_walker.ExpressionWalker"}, {"fullname": "data_algebra.polars_model.ExpressionRequirementsCollector.__init__", "modulename": "data_algebra.polars_model", "qualname": "ExpressionRequirementsCollector.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "data_algebra.polars_model.ExpressionRequirementsCollector.act_on_literal", "modulename": "data_algebra.polars_model", "qualname": "ExpressionRequirementsCollector.act_on_literal", "kind": "function", "doc": "<p>Action for a literal/constant in an expression.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  literal value being supplied</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>converted result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.ExpressionRequirementsCollector.act_on_column_name", "modulename": "data_algebra.polars_model", "qualname": "ExpressionRequirementsCollector.act_on_column_name", "kind": "function", "doc": "<p>Action for a column name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arg</strong>:  None</li>\n<li><strong>value</strong>:  column name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>arg acted on</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">arg</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.ExpressionRequirementsCollector.act_on_expression", "modulename": "data_algebra.polars_model", "qualname": "ExpressionRequirementsCollector.act_on_expression", "kind": "function", "doc": "<p>Action for a column name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arg</strong>:  None</li>\n<li><strong>values</strong>:  list of values to work on</li>\n<li><strong>op</strong>:  operator to apply</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>arg acted on</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">arg</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">List</span>, </span><span class=\"param\"><span class=\"n\">op</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.ExpressionRequirementsCollector.add_in_temp_columns", "modulename": "data_algebra.polars_model", "qualname": "ExpressionRequirementsCollector.add_in_temp_columns", "kind": "function", "doc": "<p>Add required temp columns to temp_v_columns_list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">temp_v_columns</span><span class=\"p\">:</span> <span class=\"n\">List</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.PolarsExpressionActor", "modulename": "data_algebra.polars_model", "qualname": "PolarsExpressionActor", "kind": "class", "doc": "<p>Act on expressions in Polars context</p>\n", "bases": "data_algebra.expression_walker.ExpressionWalker"}, {"fullname": "data_algebra.polars_model.PolarsExpressionActor.__init__", "modulename": "data_algebra.polars_model", "qualname": "PolarsExpressionActor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">polars_model</span>,</span><span class=\"param\">\t<span class=\"n\">extend_context</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">project_context</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">partition_by</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "data_algebra.polars_model.PolarsExpressionActor.act_on_literal", "modulename": "data_algebra.polars_model", "qualname": "PolarsExpressionActor.act_on_literal", "kind": "function", "doc": "<p>Action for a literal/constant in an expression.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  literal value being supplied</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>converted result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.PolarsExpressionActor.act_on_column_name", "modulename": "data_algebra.polars_model", "qualname": "PolarsExpressionActor.act_on_column_name", "kind": "function", "doc": "<p>Action for a column name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arg</strong>:  None</li>\n<li><strong>value</strong>:  column name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>arg acted on</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">arg</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.PolarsExpressionActor.act_on_expression", "modulename": "data_algebra.polars_model", "qualname": "PolarsExpressionActor.act_on_expression", "kind": "function", "doc": "<p>Action for a column name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arg</strong>:  None</li>\n<li><strong>values</strong>:  list of values to work on</li>\n<li><strong>op</strong>:  operator to apply</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>arg acted on</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">arg</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">List</span>, </span><span class=\"param\"><span class=\"n\">op</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.PolarsModel", "modulename": "data_algebra.polars_model", "qualname": "PolarsModel", "kind": "class", "doc": "<p>Interface for realizing the data algebra as a sequence of steps over Polars <a href=\"https://www.pola.rs\">https://www.pola.rs</a> .</p>\n\n<p>Note: not fully implemented yet.</p>\n", "bases": "data_algebra.data_model.DataModel"}, {"fullname": "data_algebra.polars_model.PolarsModel.__init__", "modulename": "data_algebra.polars_model", "qualname": "PolarsModel.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">use_lazy_eval</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "data_algebra.polars_model.PolarsModel.data_frame", "modulename": "data_algebra.polars_model", "qualname": "PolarsModel.data_frame", "kind": "function", "doc": "<p>Build a new data frame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arg</strong>:  optional argument passed to constructor.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data frame</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">arg</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.PolarsModel.is_appropriate_data_instance", "modulename": "data_algebra.polars_model", "qualname": "PolarsModel.is_appropriate_data_instance", "kind": "function", "doc": "<p>Check if df is our type of data frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.PolarsModel.clean_copy", "modulename": "data_algebra.polars_model", "qualname": "PolarsModel.clean_copy", "kind": "function", "doc": "<p>Copy of data frame without indices.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.PolarsModel.to_pandas", "modulename": "data_algebra.polars_model", "qualname": "PolarsModel.to_pandas", "kind": "function", "doc": "<p>Convert to Pandas</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.PolarsModel.drop_indices", "modulename": "data_algebra.polars_model", "qualname": "PolarsModel.drop_indices", "kind": "function", "doc": "<p>Drop indices in place.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.PolarsModel.bad_column_positions", "modulename": "data_algebra.polars_model", "qualname": "PolarsModel.bad_column_positions", "kind": "function", "doc": "<p>Return vector indicating which entries are null (vectorized).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.PolarsModel.concat_rows", "modulename": "data_algebra.polars_model", "qualname": "PolarsModel.concat_rows", "kind": "function", "doc": "<p>Concatenate rows from frame_list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">frame_list</span><span class=\"p\">:</span> <span class=\"n\">List</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.PolarsModel.concat_columns", "modulename": "data_algebra.polars_model", "qualname": "PolarsModel.concat_columns", "kind": "function", "doc": "<p>Concatenate columns from frame_list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">frame_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.PolarsModel.get_cell", "modulename": "data_algebra.polars_model", "qualname": "PolarsModel.get_cell", "kind": "function", "doc": "<p>get a value from a cell</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">colname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.PolarsModel.set_col", "modulename": "data_algebra.polars_model", "qualname": "PolarsModel.set_col", "kind": "function", "doc": "<p>set column, return ref</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"n\">colname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.PolarsModel.table_is_keyed_by_columns", "modulename": "data_algebra.polars_model", "qualname": "PolarsModel.table_is_keyed_by_columns", "kind": "function", "doc": "<p>Check if a table is keyed by a given list of column names.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>table</strong>:  DataFrame</li>\n<li><strong>column_names</strong>:  list of column names</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if rows are uniquely keyed by values in named columns</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">column_names</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.PolarsModel.eval", "modulename": "data_algebra.polars_model", "qualname": "PolarsModel.eval", "kind": "function", "doc": "<p>Implementation of Polars evaluation of data algebra operators</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>op</strong>:  ViewRepresentation to evaluate</li>\n<li><strong>data_map</strong>:  dictionary mapping table and view names to data frames</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data frame result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops_types</span><span class=\"o\">.</span><span class=\"n\">OperatorPlatform</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">data_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">internals</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.PolarsModel.blocks_to_rowrecs", "modulename": "data_algebra.polars_model", "qualname": "PolarsModel.blocks_to_rowrecs", "kind": "function", "doc": "<p>Convert a block record (record spanning multiple rows) into a rowrecord (record in a single row).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  data frame to be transformed</li>\n<li><strong>blocks_in</strong>:  cdata record specification</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data frame</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">blocks_in</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.PolarsModel.rowrecs_to_blocks", "modulename": "data_algebra.polars_model", "qualname": "PolarsModel.rowrecs_to_blocks", "kind": "function", "doc": "<p>Convert rowrecs (single row records) into block records (multiple row records).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  data frame to transform.</li>\n<li><strong>blocks_out</strong>:  cdata record specification.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data frame</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">blocks_out</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.polars_model.register_polars_model", "modulename": "data_algebra.polars_model", "qualname": "register_polars_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.python3_lark", "modulename": "data_algebra.python3_lark", "kind": "module", "doc": "<p>Modified Lark grammar for Python-like expressions.</p>\n\n<p><a href=\"https://github.com/lark-parser/lark/blob/master/examples/advanced/python3.lark\">https://github.com/lark-parser/lark/blob/master/examples/advanced/python3.lark</a>\nCopyright 2017 Erez Shinan\nLicence: <a href=\"https://github.com/lark-parser/lark/blob/master/LICENSE\">https://github.com/lark-parser/lark/blob/master/LICENSE</a> (MIT)</p>\n"}, {"fullname": "data_algebra.solutions", "modulename": "data_algebra.solutions", "kind": "module", "doc": "<p>data algebra solutions to common data processing problems</p>\n"}, {"fullname": "data_algebra.solutions.def_multi_column_map", "modulename": "data_algebra.solutions", "qualname": "def_multi_column_map", "kind": "function", "doc": "<p>Map all columns in list cols_to_map through the mapping in mapping table (key by column name and value).\nd should be uniquely keyed by row_keys, and mapping table should be uniquely keyed by [col_name_key, col_value_key].</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d</strong>:  view to re-map</li>\n<li><strong>mapping_table</strong>:  view to get mappings from</li>\n<li><strong>row_keys</strong>:  columns that uniquely identify rows in d</li>\n<li><strong>col_name_key</strong>:  column name specifying columns in mapping_table</li>\n<li><strong>col_value_key</strong>:  column name specifying pre-map values in mapping table</li>\n<li><strong>mapped_value_key</strong>:  column name specifying post-map values in mapping table</li>\n<li><strong>cols_to_map</strong>:  columns to re-map.</li>\n<li><strong>coalesce_value</strong>:  if not None, coalesce to this value</li>\n<li><strong>cols_to_map_back</strong>:  if not None new names for resulting columns</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>operations specifying how to re-map DataFrame</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">mapping_table</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>,</span><span class=\"param\">\t<span class=\"n\">row_keys</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">col_name_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;column_name&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">col_value_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;column_value&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mapped_value_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mapped_value&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cols_to_map</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">coalesce_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cols_to_map_back</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.solutions.xicor_query", "modulename": "data_algebra.solutions", "qualname": "xicor_query", "kind": "function", "doc": "<p>Build a query computing the xicor of y_name as a function of x_name for each var_keys group of rows.\nRef: <a href=\"https://arxiv.org/abs/1909.10140\">https://arxiv.org/abs/1909.10140</a></p>\n\n<p>xicor(x, y) : 1 - n sum(i = 0, n-2) |r(i+1) - r(i)| / (2 * sum(i=0, n-1) l(i) (n - l(i)),\nwhere r(i) is the rank of the i-th Y item when ordered by x, and l(i) is the reverse rank of\nthe l-th Y item.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  description of data to transform</li>\n<li><strong>x_name</strong>:  name for explanatory variable column.</li>\n<li><strong>y_name</strong>:  name for dependent variable column.</li>\n<li><strong>var_keys</strong>:  list of names for variable id columns.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data algebra query computing xicor.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">x_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;x&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">y_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;y&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">var_keys</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">()</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.solutions.xicor_score_variables_plan", "modulename": "data_algebra.solutions", "qualname": "xicor_score_variables_plan", "kind": "function", "doc": "<p>Set up a query to batch compute xicor.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d</strong>:  description of incoming data frame</li>\n<li><strong>x_vars</strong>:  list of explanatory variable names</li>\n<li><strong>y_name</strong>:  name of dependent variable</li>\n<li><strong>n_rep</strong>:  number of times to repeat calculation</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>group_calc_ops, rep_frame_name, rep_frame</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">x_vars</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">y_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">n_rep</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">25</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.solutions.last_observed_carried_forward", "modulename": "data_algebra.solutions", "qualname": "last_observed_carried_forward", "kind": "function", "doc": "<p>Copy last observed non-null value in column value_column_name forward using order order_by and\noptional partition_by partition.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d</strong>:  ViewRepresentation representation of data to transform.</li>\n<li><strong>order_by</strong>:  columns to order by</li>\n<li><strong>partition_by</strong>:  optional partitioning column</li>\n<li><strong>value_column_name</strong>:  column to alter</li>\n<li><strong>selection_predicate</strong>:  expression to choose values to replace</li>\n<li><strong>locf_to_use_column_name</strong>:  name for a temporary values column</li>\n<li><strong>locf_non_null_rank_column_name</strong>:  name for a temporary values column</li>\n<li><strong>locf_tiebreaker_column_name</strong>:  name for a temporary values column</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>ops</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">partition_by</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">value_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">selection_predicate</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;is_null()&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">locf_to_use_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;locf_to_use&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">locf_non_null_rank_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;locf_non_null_rank&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">locf_tiebreaker_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;locf_tiebreaker&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.solutions.braid_data", "modulename": "data_algebra.solutions", "qualname": "braid_data", "kind": "function", "doc": "<p>Mix data from two sources, ordering by order_by columns and carrying forward observations\non d_state value column.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d_state</strong>:  ViewRepresentation representation of state by order_by.</li>\n<li><strong>d_event</strong>:  ViewRepresentation representation of events by order_by.</li>\n<li><strong>order_by</strong>:  columns to order by (non empty list of column names)</li>\n<li><strong>partition_by</strong>:  optional partitioning column names</li>\n<li><strong>state_value_column_name</strong>:  column to copy from d_state and propagate forward</li>\n<li><strong>event_value_column_names</strong>:  columns to copy from d_event</li>\n<li><strong>source_id_column</strong>:  name for source identification column.</li>\n<li><strong>state_row_mark</strong>:  source annotation of state rows.</li>\n<li><strong>event_row_mark</strong>:  source annotation of event rows.</li>\n<li><strong>stand_in_values</strong>:  dictionary stand in values to use for state_value_column_name and event_value_column_names\nneeded to get column types correct, replaced by None and not passed further.</li>\n<li><strong>locf_to_use_column_name</strong>:  name for a temporary values column</li>\n<li><strong>locf_non_null_rank_column_name</strong>:  name for a temporary values column</li>\n<li><strong>locf_tiebreaker_column_name</strong>:  name for a temporary values column</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>ops</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">d_state</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>,</span><span class=\"param\">\t<span class=\"n\">d_event</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">partition_by</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">state_value_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">event_value_column_names</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">source_id_column</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;record_type&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">state_row_mark</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;state_row&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">event_row_mark</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;event_row&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">stand_in_values</span><span class=\"p\">:</span> <span class=\"n\">Dict</span>,</span><span class=\"param\">\t<span class=\"n\">locf_to_use_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;locf_to_use&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">locf_non_null_rank_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;locf_non_null_rank&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">locf_tiebreaker_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;locf_tiebreaker&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.solutions.rank_to_average", "modulename": "data_algebra.solutions", "qualname": "rank_to_average", "kind": "function", "doc": "<p>Compute rank where the rank of each item is the average of all items with same order\nposition. That is rank_to_average([1, 1, 2]) = [1.5, 1.5, 3].</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d</strong>:  ViewRepresentation representation of data to transform.</li>\n<li><strong>order_by</strong>:  columns to order by</li>\n<li><strong>partition_by</strong>:  optional partitioning column</li>\n<li><strong>rank_column_name</strong>:  column to land ranks in</li>\n<li><strong>tie_breaker_column_name</strong>:  temp column</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>ops</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">partition_by</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rank_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tie_breaker_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;rank_tie_breaker&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.solutions.replicate_rows_query", "modulename": "data_algebra.solutions", "qualname": "replicate_rows_query", "kind": "function", "doc": "<p>Build query to replicate each row by count_column_name copies.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d</strong>:  incoming data description.</li>\n<li><strong>count_column_name</strong>:  name of count column, should be non-negative integers.</li>\n<li><strong>seq_column_name</strong>:  name of colulmn to land sequence in.</li>\n<li><strong>join_temp_name</strong>:  name for join temp table.</li>\n<li><strong>max_count</strong>:  maximum in count column we need to handle, should be a reasonable upper bound.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>ops and table to join against</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">count_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">seq_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">join_temp_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">max_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.sql_format_options", "modulename": "data_algebra.sql_format_options", "kind": "module", "doc": "<p>Simple class for holding SQL formatting options</p>\n"}, {"fullname": "data_algebra.sql_format_options.SQLFormatOptions", "modulename": "data_algebra.sql_format_options", "qualname": "SQLFormatOptions", "kind": "class", "doc": "<p>Simple class for holding SQL formatting options</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>use_with</strong>:  bool, if True use with to introduce common table expressions</li>\n<li><strong>annotate</strong>:  bool, if True add annotations from original pipeline as SQL comments</li>\n<li><strong>sql_indent</strong>:  str = \" \", indent string (must be non-empty and all whitespace)</li>\n<li><strong>initial_commas</strong>:  bool = False, if True write initial commas instead of after commas</li>\n<li><strong>warn_on_method_support</strong>:  bool = True, if True warn on translation to untrusted methods</li>\n<li><strong>warn_on_novel_methods</strong>:  bool = True, if True warn on translation to unrecognized methods</li>\n<li><strong>use_cte_elim</strong>:  bool = False, if True optimize SQL by re-using common table expressions (experimental)</li>\n</ul>\n", "bases": "types.SimpleNamespace"}, {"fullname": "data_algebra.sql_format_options.SQLFormatOptions.__init__", "modulename": "data_algebra.sql_format_options", "qualname": "SQLFormatOptions.__init__", "kind": "function", "doc": "<p>SQL formatting options.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>use_with</strong>:  bool, if True use with to introduce common table expressions</li>\n<li><strong>annotate</strong>:  bool, if True add annotations from original pipeline as SQL comments</li>\n<li><strong>sql_indent</strong>:  str = \" \", indent string (must be non-empty and all whitespace)</li>\n<li><strong>initial_commas</strong>:  bool = False, if True write initial commas instead of after commas</li>\n<li><strong>warn_on_method_support</strong>:  bool = True, if True warn on translation to untrusted methods</li>\n<li><strong>warn_on_novel_methods</strong>:  bool = True, if True warn on translation to unrecognized methods</li>\n<li><strong>use_cte_elim</strong>:  bool = False, if True optimize SQL by re-using common table expressions (experimental)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">use_with</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">annotate</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">sql_indent</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39; &#39;</span>,</span><span class=\"param\">\t<span class=\"n\">initial_commas</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">warn_on_method_support</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">warn_on_novel_methods</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">use_cte_elim</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "data_algebra.test_util", "modulename": "data_algebra.test_util", "kind": "module", "doc": "<p>Utils that help with testing. This module is allowed to import many other modules.</p>\n"}, {"fullname": "data_algebra.test_util.formats_to_self", "modulename": "data_algebra.test_util", "qualname": "formats_to_self", "kind": "function", "doc": "<p>Check a operator dag formats and parses back to itself.\nCan raise exceptions. Also checks pickling.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ops</strong>:  data_algebra.data_ops.ViewRepresentation</li>\n<li><strong>data_model_map</strong>:  map from abbreviated module names to modules (i.e. define pd)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>logical, True if formats and evals back to self</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ops</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">data_model_map</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.test_util.equivalent_frames", "modulename": "data_algebra.test_util", "qualname": "equivalent_frames", "kind": "function", "doc": "<p>return False if the frames are equivalent (up to column re-ordering and possible row-reordering).\nIgnores indexing. None and nan are considered equivalent in numeric contexts.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a</span>,</span><span class=\"param\">\t<span class=\"n\">b</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">float_tol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-08</span>,</span><span class=\"param\">\t<span class=\"n\">check_column_order</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cols_case_sensitive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">check_row_order</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.test_util.check_transform_on_data_model", "modulename": "data_algebra.test_util", "qualname": "check_transform_on_data_model", "kind": "function", "doc": "<p>Test an operator dag produces the expected result, and parses correctly.\nAsserts if there are issues</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ops</strong>:  data_algebra.data_ops.ViewRepresentation</li>\n<li><strong>data</strong>:  DataFrame or map of strings to pd.DataFrame</li>\n<li><strong>expect</strong>:  DataFrame</li>\n<li><strong>float_tol</strong>:  passed to equivalent_frames()</li>\n<li><strong>check_column_order</strong>:  passed to equivalent_frames()</li>\n<li><strong>cols_case_sensitive</strong>:  passed to equivalent_frames()</li>\n<li><strong>check_row_order</strong>:  passed to equivalent_frames()</li>\n<li><strong>check_parse</strong>:  if True check expression parses/formats to self</li>\n<li><strong>local_data_model</strong>:  optional alternate evaluation model</li>\n<li><strong>valid_for_empty</strong>:  logical, if True test on empty inputs</li>\n<li><strong>empty_produces_empty</strong>:  logical, if True assume emtpy inputs should produce empty output</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None, assert if there is an issue</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">ops</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span>,</span><span class=\"param\">\t<span class=\"n\">expect</span>,</span><span class=\"param\">\t<span class=\"n\">float_tol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-08</span>,</span><span class=\"param\">\t<span class=\"n\">check_column_order</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cols_case_sensitive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">check_row_order</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">check_parse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">local_data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_for_empty</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">empty_produces_empty</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.test_util.get_test_dbs", "modulename": "data_algebra.test_util", "qualname": "get_test_dbs", "kind": "function", "doc": "<p>handles connected to databases for testing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.test_util.check_transform", "modulename": "data_algebra.test_util", "qualname": "check_transform", "kind": "function", "doc": "<p>Test an operator dag produces the expected result, and parses correctly.\nAssert/raise if there are issues.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ops</strong>:  data_algebra.data_ops.ViewRepresentation</li>\n<li><strong>data</strong>:  pd.DataFrame or map of strings to pd.DataFrame</li>\n<li><strong>expect</strong>:  pd.DataFrame</li>\n<li><strong>float_tol</strong>:  passed to equivalent_frames()</li>\n<li><strong>check_column_order</strong>:  passed to equivalent_frames()</li>\n<li><strong>cols_case_sensitive</strong>:  passed to equivalent_frames()</li>\n<li><strong>check_row_order</strong>:  passed to equivalent_frames()</li>\n<li><strong>check_parse</strong>:  if True check expression parses/formats to self</li>\n<li><strong>try_on_DBs</strong>:  if true, try on databases</li>\n<li><strong>models_to_skip</strong>:  None or set of model names or models to skip testing</li>\n<li><strong>valid_for_empty</strong>:  logical, if True perform tests on empty inputs</li>\n<li><strong>empty_produces_empty</strong>:  logical, if True assume empty inputs should produce empty output</li>\n<li><strong>local_data_mode</strong>:  data model to use</li>\n<li><strong>try_on_Polars</strong>:  try tests again on Polars</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>nothing</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ops</span>,</span><span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">expect</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">float_tol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-08</span>,</span><span class=\"param\">\t<span class=\"n\">check_column_order</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cols_case_sensitive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">check_row_order</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">check_parse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">try_on_DBs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">models_to_skip</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_for_empty</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">empty_produces_empty</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">local_data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">try_on_Polars</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.util", "modulename": "data_algebra.util", "kind": "module", "doc": "<p>Basic utilities. Not allowed to import many other modules.</p>\n"}, {"fullname": "data_algebra.util.pandas_to_example_str", "modulename": "data_algebra.util", "qualname": "pandas_to_example_str", "kind": "function", "doc": "<p>Convert data frame to a Python source code string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obj</strong>:  data frame to convert.</li>\n<li><strong>local_data_model</strong>:  data model to use.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Python source code representation of obj.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">local_data_model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.util.map_type_to_canonical", "modulename": "data_algebra.util", "qualname": "map_type_to_canonical", "kind": "function", "doc": "<p>Map type to a smaller set of considered equivalent types.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong>:  type to map</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>type</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"nb\">type</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">type</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.util.guess_carried_scalar_type", "modulename": "data_algebra.util", "qualname": "guess_carried_scalar_type", "kind": "function", "doc": "<p>Guess the type of a column or scalar.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>col</strong>:  column or scalar to inspect</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>type of first non-None entry, if any , else type(None)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">col</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">type</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.util.guess_column_types", "modulename": "data_algebra.util", "qualname": "guess_column_types", "kind": "function", "doc": "<p>Guess column types as type of first non-missing value.\nWill not return series types, as some pandas data frames with non-trivial indexing report this type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d</strong>:  pandas.DataFrame</li>\n<li><strong>columns</strong>:  list of columns to check, if None all columns are checked</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>map of column names to guessed types, empty dict if any column guess fails</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.util.compatible_types", "modulename": "data_algebra.util", "qualname": "compatible_types", "kind": "function", "doc": "<p>Check if a set of types are all considered equivalent.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>types_seen</strong>:  collection of types seen</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if types are all compatible, else False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">types_seen</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "data_algebra.util.check_columns_appear_compatible", "modulename": "data_algebra.util", "qualname": "check_columns_appear_compatible", "kind": "function", "doc": "<p>Check if columns have compatible types</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d_left</strong>:  pandas dataframe to check</li>\n<li><strong>d_right</strong>:  pandas dataframe to check</li>\n<li><strong>columns</strong>:  columns to check, None means check all columns</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None if compatible, else dictionary of mismatches</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">d_left</span>,</span><span class=\"param\">\t<span class=\"n\">d_right</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();